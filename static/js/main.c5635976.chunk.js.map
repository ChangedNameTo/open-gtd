{"version":3,"sources":["Components/TaskList/TaskListSlice.ts","store.ts","reportWebVitals.js","Components/Navbar.tsx","Components/Footer.tsx","hooks.ts","Components/AddNewTask/AddNewTask.tsx","Components/Task/Task.tsx","Components/TaskList/TaskList.tsx","Components/SelectedTask/SelectedTask.tsx","Components/Folders.tsx","Components/TaskUI.tsx","App.tsx","index.tsx"],"names":["enableMapSet","taskListSlice","createSlice","name","initialState","taskList","byId","allIds","selectedTask","reducers","addTask","state","action","newTaskId","String","length","task","payload","created","Date","now","completed","push","selectTask","actions","getTaskIds","tasks","getSelectedTask","persistConfig","key","storage","blacklist","taskPersistConfig","combineReducers","persistReducer","taskReducer","persistedReducer","store","configureStore","reducer","middleware","thunk","persistor","persistStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navbar","className","icon","size","footer","socialLink","text","link","onClick","window","open","followLink","useAppDispatch","useDispatch","useSelector","AddNewTask","isInitialMount","useRef","useState","visible","setVisible","hidden","setHidden","taskText","setTaskText","dispatch","useEffect","current","setTimeout","id","type","placeholder","value","onChange","e","target","TaskRow","props","taskId","TaskRowDisplay","map","index","Task","buildTaskList","SelectedTask","toLocaleString","Folders","taskUI","App","library","add","fab","fas","far","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c5635976.chunk.js","sourcesContent":["import { enableMapSet } from \"immer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store\";\r\n\r\nimport TaskList from \"./TaskListInterface\";\r\n\r\nenableMapSet();\r\n\r\nconst initialState: TaskList = {\r\n  taskList: { byId: {}, allIds: [] },\r\n  selectedTask: \"-1\",\r\n};\r\n\r\nexport const taskListSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState,\r\n  reducers: {\r\n    addTask: (state: TaskList, action: PayloadAction<string>) => {\r\n      // state.addTask(action.payload);\r\n      const newTaskId = String(state.taskList.allIds.length);\r\n\r\n      state.taskList.byId[newTaskId] = {\r\n        task: action.payload,\r\n        created: Date.now(),\r\n        completed: -1,\r\n      };\r\n      state.taskList.allIds.push(newTaskId);\r\n    },\r\n    selectTask: (state: TaskList, action: PayloadAction<string>) => {\r\n      state.selectedTask = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTask, selectTask } = taskListSlice.actions;\r\n\r\nexport const getTaskIds = (state: RootState) => state.tasks.taskList.allIds;\r\nexport const getSelectedTask = (state: RootState) =>\r\n  state.tasks.selectedTask !== \"-1\"\r\n    ? state.tasks.taskList.byId[state.tasks.selectedTask]\r\n    : { task: \"\", created: -1, completed: null };\r\n\r\nexport default taskListSlice.reducer;\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n// Change this to electron storage when I switch to electron\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport thunk from \"redux-thunk\";\r\nimport taskReducer from \"./Components/TaskList/TaskListSlice\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"tasks\"],\r\n};\r\n\r\nconst taskPersistConfig = {\r\n  key: \"tasks\",\r\n  storage,\r\n  blacklist: [\"selectedTask\"],\r\n};\r\n\r\nconst reducers = combineReducers({\r\n  tasks: persistReducer(taskPersistConfig, taskReducer),\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [thunk],\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n/**\r\n * Returns the navbar component\r\n * @return {FunctionComponent}\r\n */\r\nfunction navbar() {\r\n  return (\r\n    <nav className=\"bg-gray-800\">\r\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex items-center justify-between h16\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0 py-1\">\r\n              <FontAwesomeIcon\r\n                className=\"text-white\"\r\n                icon={[\"far\", \"check-circle\"]}\r\n                size=\"2x\"\r\n              />\r\n            </div>\r\n            <div className=\"hidden md:block\">\r\n              <div className=\"ml-10 flex items-baseline space-x-4\">\r\n                <button className=\"bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-bold\">\r\n                  Inbox\r\n                </button>\r\n\r\n                <button className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium hover:font-bold\">\r\n                  Tasks\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default navbar;\r\n","import { IconName } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * Returns the footer component\r\n * @return {FunctionComponent}\r\n */\r\nfunction footer() {\r\n  const followLink = (link: string) => {\r\n    window.open(link);\r\n  };\r\n\r\n  const socialLink = (text: IconName, link: string) => {\r\n    return (\r\n      <div className=\"grid justify-items-center px-4\">\r\n        <button\r\n          className=\"text-white rounded border-2 border-white hover:bg-white hover:text-gray-800 px-2 py-1 focus:outline-none\"\r\n          onClick={() => followLink(link)}\r\n        >\r\n          <FontAwesomeIcon size=\"3x\" icon={[\"fab\", text]} />\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full bg-gray-800 divide-x flex flex-row justify-center py-2\">\r\n      {socialLink(\"github-square\", \"https://github.com/ChangedNameTo/open-gtd\")}\r\n      {socialLink(\"linkedin\", \"\")}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default footer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { ChangeEvent, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { FaCheckCircle } from \"react-icons/fa\";\r\nimport { IconContext } from \"react-icons/lib\";\r\nimport { addTask } from \"../TaskList/TaskListSlice\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * Returns the AddNewTask Button, and the input it controls\r\n * @return {FunctionComponent}\r\n */\r\nfunction AddNewTask() {\r\n  const isInitialMount = useRef(true);\r\n  const [visible, setVisible] = useState(false);\r\n  const [hidden, setHidden] = useState(\"hidden\");\r\n  const [taskText, setTaskText] = useState(\"\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const toggleVisible = () => setVisible(!visible);\r\n\r\n  const submitIcon = () => {\r\n    return (\r\n      <IconContext.Provider value={{ color: \"white\", size: \"20px\" }}>\r\n        <div>\r\n          <FaCheckCircle />\r\n        </div>\r\n      </IconContext.Provider>\r\n    );\r\n  };\r\n\r\n  const addTaskDivClasses = () => {\r\n    return visible\r\n      ? \"animate-fade-in-down flex flex-row focus-within:ring-green-500 focus-within:ring-2 rounded\"\r\n      : \"animate-fade-out-up flex flex-row focus-within:ring-green-500 focus-within:ring-2 rounded\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      if (!visible) {\r\n        setTimeout(() => {\r\n          setHidden(\"hidden\");\r\n        }, 500);\r\n      } else {\r\n        setTimeout(() => {\r\n          setHidden(\"\");\r\n        }, 500);\r\n      }\r\n    }\r\n  }, [visible]);\r\n\r\n  const isHidden = () => {\r\n    return hidden ? \"hidden\" : \"\";\r\n  };\r\n\r\n  const createNewTask = () => {\r\n    dispatch(addTask(taskText));\r\n    setTaskText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <button\r\n        className=\"w-full items-center px-4 bg-green-500 rounded-md shadow-m text-m font-medium border-green-600 border-2 hover:bg-green-600 text-white bold active:ring-green-500 focus:outline-none\"\r\n        id=\"addTaskButton\"\r\n        onClick={() => toggleVisible()}\r\n      >\r\n        Add New Task\r\n      </button>\r\n      <div className={`${addTaskDivClasses()} ${isHidden()}`}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"rounded-md rounded-r-none w-full border-green-100 focus:ring-0 focus:border-transparent\"\r\n          id=\"addTaskInput\"\r\n          placeholder=\"Enter new task\"\r\n          value={taskText}\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n            setTaskText(e.target.value)\r\n          }\r\n        />\r\n        <span className=\"flex items-center bg-green-600 rounded rounded-l-none border-0 px-3 hover:bg-green-500\">\r\n          <button\r\n            className=\"focus:outline-none\"\r\n            id=\"submitNewTaskButton\"\r\n            onClick={() => createNewTask()}\r\n          >\r\n            <FontAwesomeIcon\r\n              className=\"text-white py-auto\"\r\n              icon={[\"fas\", \"check-circle\"]}\r\n              size=\"2x\"\r\n            />\r\n          </button>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddNewTask;\r\n","import { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { selectTask } from \"../TaskList/TaskListSlice\";\r\n\r\n/**\r\n * Creates a task object for display.\r\n * @param props {Object} Contains the Task object that users will click on. This is the basic unit of all of open-gtd.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskRow(props: { taskId: string }) {\r\n  const dispatch = useAppDispatch();\r\n  const task = useSelector(\r\n    (state: RootState) => state.tasks.taskList.byId[props.taskId]\r\n  );\r\n\r\n  const setSelectTask = () => {\r\n    dispatch(selectTask(props.taskId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        id={`taskId${props.taskId}`}\r\n        className=\"w-full text-left hover:bg-gray-100 focus:bg-gray-200 rounded px-1 subpixel-antialiased font-mono focus:ring-0 focus:border-transparent focus:outline-none\"\r\n        onClick={() => setSelectTask()}\r\n      >\r\n        {task.task}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskRow;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport AddNewTask from \"../AddNewTask/AddNewTask\";\r\nimport { getTaskIds} from \"./TaskListSlice\";\r\nimport TaskRow from \"../Task/Task\";\r\n\r\n/**\r\n * Creates the Task Rows for the main task UI.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskRowDisplay() {\r\n  const taskList = useSelector(getTaskIds);\r\n\r\n  const buildTaskList = () => {\r\n    if (taskList) {\r\n      return taskList.map((taskId, index) => {\r\n        return <TaskRow taskId={taskId} key={index} />;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-auto px-2\">\r\n      <div className=\"header bg-white shadow\">\r\n        <div className=\"max-w-4xl mx-auto py-2 px-1 sm:px-6 lg:px-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 text-center\">\r\n            Tasks\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"divide-y\" id=\"taskList\">\r\n        {buildTaskList()}\r\n      </div>\r\n      <br />\r\n      {AddNewTask()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskRowDisplay;","import { useSelector } from \"react-redux\";\r\n\r\nimport { getSelectedTask } from \"../TaskList/TaskListSlice\";\r\n/**\r\n * After clicking on a task in\r\n * @returns {FunctionComponent}\r\n */\r\nfunction SelectedTask() {\r\n  const selectedTask = useSelector(getSelectedTask);\r\n\r\n  if (selectedTask.created === -1) {\r\n    return;\r\n  }\r\n  return (\r\n    <div className=\"flex flex-auto flex-col px-2 border-left bg-gray-200 rounded-l-xl shadow-lg py-2 min-h-full transition ease-in border-gray-300\">\r\n      <h1 className=\"place-self-center text-3xl font-bold text-center bg-white flex-shrink w-min px-8\">\r\n        {selectedTask.task}\r\n      </h1>\r\n      <div id=\"selectedTaskPane\" className=\"divide-y\">\r\n        <div>\r\n          <b>Created:</b>\r\n          {new Date(selectedTask.created).toLocaleString(\"en-us\")}\r\n          <br />\r\n          <b>Completed:</b> {selectedTask.completed}\r\n        </div>\r\n      </div>\r\n      <br />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectedTask;\r\n","function Folders() {\r\n  return (\r\n    <div className=\"flex flex-col flex-auto px-2\">\r\n      <div className=\"header bg-white shadow\">\r\n        <div className=\"max-w-4xl mx-auto py-2 px-1 sm:px-6 lg:px-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 text-center\">\r\n            Folders\r\n          </h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Folders;\r\n","import TaskRowDisplay from \"./TaskList/TaskList\";\r\nimport SelectedTask from \"./SelectedTask/SelectedTask\";\r\nimport Folders from \"./Folders\";\r\n\r\n/**\r\n * This is the main task UI window pane. It contains the task list, folders, and task view.\r\n * @return {FunctionComponent}\r\n */\r\nfunction taskUI() {\r\n  return (\r\n    <div className=\"flex space-x-2 py-2 h-full\">\r\n      {Folders()}\r\n      {TaskRowDisplay()}\r\n      {SelectedTask()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default taskUI;\r\n","import navbar from \"./Components/Navbar\";\nimport footer from \"./Components/Footer\";\nimport taskUI from \"./Components/TaskUI\";\n\n/**\n * Returns the base application. This sets up the main UI frames.\n * @return {Application}\n */\nfunction App() {\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header>{navbar()}</header>\n      <main className=\"flex-1 overflow-y-auto mb-20\">{taskUI()}</main>\n      <footer className=\"fixed bottom-0 w-full isolation-auto\">\n        {footer()}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nlibrary.add(fab, fas, far);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}