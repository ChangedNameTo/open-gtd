{"version":3,"sources":["Components/Task/TaskInterface.ts","Components/TaskList/TaskListSlice.ts","store.ts","reportWebVitals.js","Components/Navbar.tsx","Components/Footer.tsx","hooks.ts","Components/AddNewTask/AddNewTask.tsx","Components/Task/Task.tsx","Components/TaskList/TaskList.tsx","Components/SelectedTask/SelectedTask.tsx","Components/Folders.tsx","Components/TaskUI.tsx","App.tsx","index.tsx"],"names":["TaskStatus","enableMapSet","taskListSlice","createSlice","name","initialState","taskList","byId","allIds","selectedTask","reducers","addTask","state","action","payload","newTaskId","String","length","task","note","status","Active","created","Date","now","modified","completed","push","selectTask","updateTaskTaskName","taskId","newName","updateTaskTaskStatus","newStatus","Complete","updateTaskTaskNote","newNote","actions","getTaskIds","tasks","getSelectedTaskId","getSelectedTask","persistConfig","key","storage","blacklist","taskPersistConfig","combineReducers","persistReducer","taskReducer","persistedReducer","store","configureStore","reducer","middleware","thunk","persistor","persistStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navbar","className","icon","size","footer","socialLink","text","link","onClick","window","open","followLink","useAppDispatch","useDispatch","useSelector","AddNewTask","isInitialMount","useRef","useState","visible","setVisible","hidden","setHidden","taskText","setTaskText","dispatch","useEffect","current","setTimeout","createNewTask","trim","id","type","placeholder","value","onChange","e","target","onKeyDown","shiftKey","preventDefault","onEnterPress","TaskRow","props","setSelectTask","currentTarget","updateTaskStatus","Dropped","TaskRowDisplay","map","index","Task","buildTaskList","SelectedTask","selectedTaskId","styleDates","date","toLocaleString","buttonIsActive","updateTaskName","updateTaskNote","Folders","taskUI","App","library","add","fab","fas","far","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.2a2bb0a3.chunk.js","sourcesContent":["export enum TaskStatus {\r\n  Active,\r\n  Complete,\r\n  Dropped,\r\n}\r\n\r\nexport default interface Task {\r\n  // The actual task text\r\n  task: string;\r\n\r\n  // Anything placed into the note text box\r\n  note: string;\r\n\r\n  // One of the three possible statuses that a task can have\r\n  status: TaskStatus;\r\n\r\n  // Timestamps\r\n  readonly created: number;\r\n  modified: number;\r\n  completed: number;\r\n}\r\n","import { enableMapSet } from \"immer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store\";\r\n\r\nimport TaskList from \"./TaskListInterface\";\r\nimport { TaskStatus } from \"../Task/TaskInterface\";\r\n\r\nenableMapSet();\r\n\r\nconst initialState: TaskList = {\r\n  taskList: { byId: {}, allIds: [] },\r\n  selectedTask: \"-1\",\r\n};\r\n\r\nexport const taskListSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState,\r\n  reducers: {\r\n    addTask: (state: TaskList, action: PayloadAction<string>) => {\r\n      // Do not add task if the field is empty\r\n      if (action.payload === \"\") {\r\n        return;\r\n      }\r\n\r\n      const newTaskId = String(state.taskList.allIds.length);\r\n\r\n      state.taskList.byId[newTaskId] = {\r\n        task: action.payload,\r\n\r\n        note: \"\",\r\n\r\n        status: TaskStatus.Active,\r\n\r\n        created: Date.now(),\r\n        modified: Date.now(),\r\n        completed: -1,\r\n      };\r\n      state.taskList.allIds.push(newTaskId);\r\n    },\r\n    selectTask: (state: TaskList, action: PayloadAction<string>) => {\r\n      state.selectedTask = action.payload;\r\n    },\r\n    updateTaskTaskName: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.task = action.payload.newName;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskStatus: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.status = action.payload.newStatus;\r\n\r\n      if (task.status === TaskStatus.Complete) {\r\n        task.completed = Date.now();\r\n      } else {\r\n        task.completed = -1;\r\n      }\r\n\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskNote: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.note = action.payload.newNote;\r\n      task.modified = Date.now();\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  selectTask,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n} = taskListSlice.actions;\r\n\r\nexport const getTaskIds = (state: RootState) => state.tasks.taskList.allIds;\r\nexport const getSelectedTaskId = (state: RootState) => state.tasks.selectedTask;\r\nexport const getSelectedTask = (state: RootState) =>\r\n  state.tasks.taskList.byId[state.tasks.selectedTask];\r\n\r\nexport default taskListSlice.reducer;\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n// Change this to electron storage when I switch to electron\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport thunk from \"redux-thunk\";\r\nimport taskReducer from \"./Components/TaskList/TaskListSlice\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"tasks\"],\r\n};\r\n\r\nconst taskPersistConfig = {\r\n  key: \"tasks\",\r\n  storage,\r\n  blacklist: [\"selectedTask\"],\r\n};\r\n\r\nconst reducers = combineReducers({\r\n  tasks: persistReducer(taskPersistConfig, taskReducer),\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [thunk],\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n/**\r\n * Returns the navbar component\r\n * @return {FunctionComponent}\r\n */\r\nfunction navbar() {\r\n  return (\r\n    <nav className=\"bg-gray-800\">\r\n      <div className=\"mx-auto px-4 sm:px-6 lg:px-8 pb-0.5\">\r\n        <div className=\"flex items-center justify-between h-12\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0 py-1\">\r\n              <FontAwesomeIcon\r\n                className=\"text-white\"\r\n                icon={[\"far\", \"check-circle\"]}\r\n                size=\"2x\"\r\n              />\r\n            </div>\r\n            <div className=\"hidden md:block\">\r\n              <div className=\"ml-10 flex items-baseline space-x-4\">\r\n                <button className=\"bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-bold\">\r\n                  Inbox\r\n                </button>\r\n\r\n                <button className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium hover:font-bold\">\r\n                  Tasks\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default navbar;\r\n","import { IconName } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * Returns the footer component\r\n * @return {FunctionComponent}\r\n */\r\nfunction footer() {\r\n  const followLink = (link: string) => {\r\n    window.open(link);\r\n  };\r\n\r\n  const socialLink = (text: IconName, link: string) => {\r\n    return (\r\n      <div className=\"grid justify-items-center px-4\">\r\n        <button\r\n          className=\"text-white rounded border-2 border-white hover:bg-white hover:text-gray-800 px-2 py-1 focus:outline-none\"\r\n          onClick={() => followLink(link)}\r\n        >\r\n          <FontAwesomeIcon size=\"3x\" icon={[\"fab\", text]} />\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full bg-gray-800 divide-x flex flex-row justify-center py-2\">\r\n      {socialLink(\"github-square\", \"https://github.com/ChangedNameTo/open-gtd\")}\r\n      {socialLink(\"linkedin\", \"\")}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default footer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React, { ChangeEvent, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { addTask } from \"../TaskList/TaskListSlice\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * Returns the AddNewTask Button, and the input it controls\r\n * @return {FunctionComponent}\r\n */\r\nfunction AddNewTask() {\r\n  const isInitialMount = useRef(true);\r\n  const [visible, setVisible] = useState(false);\r\n  const [hidden, setHidden] = useState(\"hidden\");\r\n  const [taskText, setTaskText] = useState(\"\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const toggleVisible = () => setVisible(!visible);\r\n\r\n  const addTaskDivClasses = () => {\r\n    return visible\r\n      ? \"animate-fade-in-down flex flex-row focus-within:ring-green-500 focus-within:ring-2 rounded\"\r\n      : \"animate-fade-out-up flex flex-row focus-within:ring-green-500 focus-within:ring-2 rounded\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      if (!visible) {\r\n        setTimeout(() => {\r\n          setHidden(\"hidden\");\r\n        }, 500);\r\n      } else {\r\n        setTimeout(() => {\r\n          setHidden(\"\");\r\n        }, 500);\r\n      }\r\n    }\r\n  }, [visible]);\r\n\r\n  const isHidden = () => {\r\n    return hidden ? \"hidden\" : \"\";\r\n  };\r\n\r\n  const createNewTask = () => {\r\n    dispatch(addTask(taskText.trim()));\r\n    setTaskText(\"\");\r\n  };\r\n\r\n  const onEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\" && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      createNewTask();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <button\r\n        className=\"w-full items-center px-4 bg-green-500 rounded-md shadow-m text-m font-medium border-green-600 border-2 hover:bg-green-600 text-white bold active:ring-green-500 focus:outline-none\"\r\n        id=\"addTaskButton\"\r\n        onClick={() => toggleVisible()}\r\n      >\r\n        Add New Task\r\n      </button>\r\n      <div className={`${addTaskDivClasses()} ${isHidden()}`}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"rounded-md rounded-r-none w-full border-green-100 focus:ring-0 focus:border-transparent\"\r\n          id=\"addTaskInput\"\r\n          placeholder=\"Enter new task\"\r\n          value={taskText}\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n            setTaskText(e.target.value)\r\n          }\r\n          onKeyDown={(e) => onEnterPress(e)}\r\n        />\r\n        <span\r\n          className=\"flex items-center bg-green-600 rounded rounded-l-none border-0 px-3 hover:bg-green-500 cursor-pointer duration-200 transition ease-in-out\"\r\n          onClick={() => createNewTask()}\r\n        >\r\n          <button className=\"focus:outline-none\" id=\"submitNewTaskButton\">\r\n            <FontAwesomeIcon\r\n              className=\"text-white py-auto\"\r\n              icon={[\"fas\", \"check-circle\"]}\r\n              size=\"2x\"\r\n            />\r\n          </button>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddNewTask;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { selectTask, updateTaskTaskStatus } from \"../TaskList/TaskListSlice\";\r\nimport { TaskStatus } from \"./TaskInterface\";\r\n\r\n/**\r\n * Creates a task object for display.\r\n * @param props {Object} Contains the Task object that users will click on. This is the basic unit of all of open-gtd.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskRow(props: { taskId: string }) {\r\n  const dispatch = useAppDispatch();\r\n  const task = useSelector(\r\n    (state: RootState) => state.tasks.taskList.byId[props.taskId]\r\n  );\r\n\r\n  const setSelectTask = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (e.target !== e.currentTarget) {\r\n      return;\r\n    }\r\n    dispatch(selectTask(props.taskId));\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(updateTaskTaskStatus({ newStatus: status, taskId: props.taskId }));\r\n  };\r\n\r\n  const taskText = () => (task.task ? task.task : \"Empty task text\");\r\n\r\n  const textColor = () => (task.task ? \"\" : \"text-gray-300\");\r\n\r\n  const taskCheckboxIcon = () => {\r\n    if (task.status === TaskStatus.Active) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className=\"text-gray-300 fa-lg mt-1\"\r\n          icon={[\"far\", \"circle\"]}\r\n          onClick={() => updateTaskStatus(TaskStatus.Complete)}\r\n        />\r\n      );\r\n    } else if (task.status === TaskStatus.Complete) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className=\"text-gray-300 fa-lg mt-1\"\r\n          icon={[\"fas\", \"check-circle\"]}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    } else if (task.status === TaskStatus.Dropped) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className=\"text-gray-300 fa-lg mt-1\"\r\n          icon={[\"fas\", \"minus-circle\"]}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      id={`taskId${props.taskId}`}\r\n      className={`min-w-full text-left hover:bg-gray-100 focus:bg-gray-200 rounded my-0.5 px-1 subpixel-antialiased font-mono focus:ring-0 focus:border-transparent focus:outline-none truncate cursor-pointer`}\r\n      onClick={(e) => setSelectTask(e)}\r\n    >\r\n      <div className=\"inline px-1 isolate\">{taskCheckboxIcon()}</div>\r\n      <div\r\n        className={`${textColor()} inline-flex flex-1`}\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        {taskText()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskRow;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport AddNewTask from \"../AddNewTask/AddNewTask\";\r\nimport { getTaskIds } from \"./TaskListSlice\";\r\nimport TaskRow from \"../Task/Task\";\r\n\r\n/**\r\n * Creates the Task Rows for the main task UI.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskRowDisplay() {\r\n  const taskList = useSelector(getTaskIds);\r\n\r\n  const buildTaskList = () => {\r\n    if (taskList) {\r\n      return taskList.map((taskId, index) => {\r\n        return <TaskRow taskId={taskId} key={index} />;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col px-2 flex-grow\">\r\n      <div className=\"header bg-white shadow\">\r\n        <div className=\"max-w-4xl mx-auto py-2 px-1 sm:px-6 lg:px-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 text-center\">\r\n            Tasks\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <div className=\"divide-y divide-gray-300\" id=\"taskList\">\r\n        {buildTaskList()}\r\n      </div>\r\n      <br />\r\n      {AddNewTask()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskRowDisplay;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ChangeEvent } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { TaskStatus } from \"../Task/TaskInterface\";\r\n\r\nimport {\r\n  getSelectedTask,\r\n  getSelectedTaskId,\r\n  selectTask,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n} from \"../TaskList/TaskListSlice\";\r\n/**\r\n * After clicking on a task in\r\n * @returns {FunctionComponent}\r\n */\r\nfunction SelectedTask() {\r\n  const selectedTaskId = useSelector(getSelectedTaskId);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const updateTaskName = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(\r\n      updateTaskTaskName({ newName: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const closeSelectedTask = () => {\r\n    dispatch(selectTask(\"-1\"));\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(\r\n      updateTaskTaskStatus({ newStatus: status, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskNote = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(\r\n      updateTaskTaskNote({ newNote: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const selectedTask = useSelector(getSelectedTask);\r\n\r\n  // Early returns here to avoid having the selected task stay open at all times\r\n  if (selectedTaskId === \"-1\") {\r\n    return;\r\n  }\r\n\r\n  const closeSelectedTaskButton = () => {\r\n    return (\r\n      <div className=\"float-left mt-1\">\r\n        <span\r\n          className=\"fa-layers fa-fw fa-2x group my-1 cursor-pointer\"\r\n          id=\"closeSelectedTask\"\r\n          onClick={() => closeSelectedTask()}\r\n        >\r\n          <FontAwesomeIcon\r\n            className=\"text-gray-300 group-hover:text-gray-400 group-hover:border-gray-600 group-hover:ring-2 group-hover:ring-gray-500 rounded-full\"\r\n            icon={[\"fas\", \"circle\"]}\r\n          />\r\n          <FontAwesomeIcon\r\n            className=\"text-gray-500 align-center group-hover:text-gray-600 pl-0.5\"\r\n            icon={[\"fas\", \"angle-right\"]}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const styleDates = (date: number) => {\r\n    if (date > 0) {\r\n      return new Date(date).toLocaleString(\"en-us\");\r\n    } else {\r\n      return \"N/A\";\r\n    }\r\n  };\r\n\r\n  const buttonIsActive = (status: TaskStatus) => {\r\n    if (selectedTask.status === status) {\r\n      return \"text-bold bg-gray-700 text-gray-100 hover:text-gray-700 hover:bg-gray-300\";\r\n    } else {\r\n      return \"bg-gray-100 text-gray-700 hover:text-gray-700 hover:bg-gray-300\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col px-2 bg-gray-200 rounded-l-xl shadow-xl py-1 min-h-full transition ease-in border-gray-300 w-1/4\">\r\n      <div id=\"selectedTaskPane\" className=\"divide-y divide-gray-700\">\r\n        {/* Task Name */}\r\n        <div className=\"inline\">\r\n          {closeSelectedTaskButton()}\r\n          <input\r\n            className=\"w-full mb-2 rounded-md shadow-sm px-1 border border-gray-600 hover:ring-2 hover:ring-gray-600\"\r\n            id=\"selectedTaskName\"\r\n            value={selectedTask.task}\r\n            onChange={(e) => updateTaskName(e)}\r\n          ></input>\r\n        </div>\r\n        {/* Button Group */}\r\n        <div className=\"flex flex-row w-full py-2\">\r\n          <button\r\n            className={`${buttonIsActive(\r\n              TaskStatus.Active\r\n            )} border border-gray-600 flex-auto rounded-l duration-200 ease-in-out transition focus:outline-none`}\r\n            id=\"selectedTaskActiveButton\"\r\n            onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n          >\r\n            Active\r\n          </button>\r\n          <button\r\n            className={`${buttonIsActive(\r\n              TaskStatus.Complete\r\n            )} border border-gray-600 flex-auto duration-200 ease-in-out transition focus:outline-none`}\r\n            id=\"selectedTaskCompletedButton\"\r\n            onClick={() => updateTaskStatus(TaskStatus.Complete)}\r\n          >\r\n            Complete\r\n          </button>\r\n          <button\r\n            className={`${buttonIsActive(\r\n              TaskStatus.Dropped\r\n            )} border border-gray-600 flex-auto rounded-r duration-200 ease-in-out transition focus:outline-none`}\r\n            id=\"selectedTaskDroppedButton\"\r\n            onClick={() => updateTaskStatus(TaskStatus.Dropped)}\r\n          >\r\n            Dropped\r\n          </button>\r\n        </div>\r\n        {/* Note */}\r\n        <div className=\"flex flex-row w-full\">\r\n          <div></div>\r\n          <textarea\r\n            className=\"w-full border border-gray-600 rounded-md my-2 resize-y px-1\"\r\n            placeholder=\"Note\"\r\n            id=\"selectedTaskNote\"\r\n            value={selectedTask.note}\r\n            onChange={(e) => updateTaskNote(e)}\r\n          ></textarea>\r\n        </div>\r\n        {/* Dates */}\r\n        <div className=\"py-2\">\r\n          <div id=\"selectedTaskCreated\">\r\n            <b>Created:</b> {styleDates(selectedTask.created)}\r\n          </div>\r\n          <div id=\"selectedTaskModified\">\r\n            <b>Modified:</b> {styleDates(selectedTask.modified)}\r\n          </div>\r\n          <div id=\"selectedTaskCompleted\">\r\n            <b>Completed:</b> {styleDates(selectedTask.completed)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectedTask;\r\n","function Folders() {\r\n  return (\r\n    <div className=\"flex flex-col px-2 w-1/5\">\r\n      <div className=\"header bg-white shadow\">\r\n        <div className=\"mx-auto py-2 px-1 sm:px-6 lg:px-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 text-center\">\r\n            Folders\r\n          </h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Folders;\r\n","import TaskRowDisplay from \"./TaskList/TaskList\";\r\nimport SelectedTask from \"./SelectedTask/SelectedTask\";\r\nimport Folders from \"./Folders\";\r\n\r\n/**\r\n * This is the main task UI window pane. It contains the task list, folders, and task view.\r\n * @return {FunctionComponent}\r\n */\r\nfunction taskUI() {\r\n  return (\r\n    <div className=\"inline-flex flex-grow space-x-2 py-2 h-full w-full\">\r\n      {Folders()}\r\n      {TaskRowDisplay()}\r\n      {SelectedTask()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default taskUI;\r\n","import navbar from \"./Components/Navbar\";\nimport footer from \"./Components/Footer\";\nimport taskUI from \"./Components/TaskUI\";\n\n/**\n * Returns the base application. This sets up the main UI frames.\n * @return {Application}\n */\nfunction App() {\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header>{navbar()}</header>\n      <main className=\"flex-1 overflow-y-auto mb-20\">{taskUI()}</main>\n      <footer className=\"fixed bottom-0 w-full isolation-auto\">\n        {footer()}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nlibrary.add(fab, fas, far);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}