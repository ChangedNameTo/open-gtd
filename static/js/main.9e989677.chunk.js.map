{"version":3,"sources":["Components/Task/TaskInterface.ts","Components/TaskList/TaskListSlice.ts","Components/TaskListFilter/TaskFilterSlice.ts","Components/TaskFilterPreset/TaskFilterPresetSlice.ts","store.ts","reportWebVitals.js","Components/Task/TinyTask.tsx","hooks.ts","Components/Task/Task.tsx","Components/TaskList/TaskList.tsx","Components/SelectedTask/PrioritySelect.tsx","Components/ButtonGroup/ButtonGroup.tsx","Components/SelectedTask/SelectedTask.tsx","Components/UserProfileDropdown.tsx","Components/Sidebars/Sidebar.tsx","Components/Sidebars/MobileSidebar.tsx","Components/SearchHeader/SearchHeader.tsx","Components/TasksHeader/AddNewTask/AddNewTask.tsx","Components/TasksHeader/TasksHeader.tsx","Components/PinnedProjects/PinnedProjects.tsx","Components/TaskListFilter/TaskListFilterSelect.tsx","Components/TaskListFilter/TaskListFilters.tsx","App.tsx","index.tsx"],"names":["TaskStatus","TaskPriority","enableMapSet","taskListSlice","createSlice","name","initialState","taskList","byId","allIds","selectedTask","reducers","addTask","state","action","payload","newTaskId","String","length","task","note","status","Active","priority","None","dueDate","deferDate","created","Date","now","modified","completed","push","selectTask","updateTaskTaskName","taskId","newName","updateTaskTaskStatus","newStatus","Complete","updateTaskTaskNote","newNote","updateTaskTaskPriority","newPriority","updateTaskTaskDeferDate","newDate","updateTaskTaskDueDate","deleteTask","actions","getTasks","tasks","getSelectedTaskId","getSelectedTask","selected","taskFilterSlice","completion","hasNote","setCompletionFilter","setPriorityFilter","setHasNoteFilter","clearAllFilters","getFilters","filters","taskFilterPresetSlice","taskFilters","selectedFilter","addFilterPreset","newTaskFilterPresetId","clearFilterPresets","persistConfig","key","storage","blacklist","taskPersistConfig","filtersPersistConfig","presetsPersistConfig","combineReducers","persistReducer","taskReducer","taskFilterReducer","presets","taskFilterPresetReducer","persistedReducer","store","configureStore","reducer","middleware","thunk","persistor","persistStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TinyTask","props","useSelector","className","aria-hidden","useAppDispatch","useDispatch","Task","date","dispatch","setSelectTask","e","console","log","target","currentTarget","updateTaskStatus","onClick","classes","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","Dropped","taskCheckboxIcon","toLocaleDateString","text","noteIcon","TaskList","taskListFilters","getTaskById","hasNoteFilter","priorityFilter","completionFilter","filter","map","index","buildTinyTaskList","buildTaskList","priorityOptions","value","label","Low","Medium","High","Immediate","PrioritySelect","selectedTaskId","currentPriority","onChange","updateTaskPriority","id","ButtonGroup","buttonGroupSelectedOption","onClickArg","options","idPrefix","buttonIsActive","option","convertOptionText","buttonText","leftButton","slice","rightButton","SelectedTask","useState","open","setOpen","useEffect","undefined","styleDates","toLocaleString","taskSubsectionHeader","subsectionHeader","datepicker","dateChangeFunction","placeholderText","chosenDate","isClearable","dateFormat","todayButton","openToDate","Root","show","as","Fragment","static","onClose","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","Title","htmlFor","rows","updateTaskName","placeholder","getTime","updateTaskNote","classNames","Boolean","join","UserProfileDropdown","Button","src","alt","Items","Item","active","navigation","href","icon","HomeIcon","current","teams","bgColorClass","Sidebar","sidebarOpen","setSidebarOpen","type","item","aria-current","role","aria-labelledby","team","MobileSidebar","SearchHeader","method","AddNewTask","taskText","setTaskText","createNewTask","trim","Panel","onKeyDown","shiftKey","preventDefault","onEnterPress","TaskHeader","pinnedProjects","title","initials","members","handle","imageUrl","totalMembers","lastUpdated","pinned","project","PinnedProjects","TaskListFilterSelect","currentFilterValue","updateFilterFunction","filterLabel","optionArray","handleBooleanValues","filterValue","Label","Options","Option","TaskListFilters","currentFilters","Example","library","add","fab","fas","far","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9e989677.chunk.js","sourcesContent":["export enum TaskStatus {\r\n  Active = \"Active\",\r\n  Complete = \"Complete\",\r\n  Dropped = \"Dropped\",\r\n}\r\n\r\nexport enum TaskPriority {\r\n  None = \"None\",\r\n  Low = \"Low ✅\",\r\n  Medium = \"Medium ⚠️\",\r\n  High = \"High 🛑\",\r\n  Immediate = \"Immediate ⛔️\",\r\n}\r\n\r\nexport default interface Task {\r\n  // The actual task text\r\n  task: string;\r\n\r\n  // Anything placed into the note text box\r\n  note: string;\r\n\r\n  // One of the three possible statuses that a task can have\r\n  status: TaskStatus;\r\n\r\n  // One of the five possible priorities, default None\r\n  priority: TaskPriority;\r\n\r\n  dueDate: number | null;\r\n  deferDate: number | null;\r\n\r\n  // Timestamps\r\n  readonly created: number;\r\n  modified: number;\r\n  completed: number;\r\n}\r\n","import { enableMapSet } from \"immer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store\";\r\n\r\nimport TaskList from \"./TaskListInterface\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\n\r\nenableMapSet();\r\n\r\nconst initialState: TaskList = {\r\n  taskList: { byId: {}, allIds: [] },\r\n  selectedTask: \"-1\",\r\n};\r\n\r\nexport const taskListSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState,\r\n  reducers: {\r\n    addTask: (state: TaskList, action: PayloadAction<string>) => {\r\n      // Do not add task if the field is empty\r\n      if (action.payload === \"\") {\r\n        return;\r\n      }\r\n\r\n      const newTaskId = String(state.taskList.allIds.length);\r\n\r\n      state.taskList.byId[newTaskId] = {\r\n        task: action.payload,\r\n\r\n        note: \"\",\r\n\r\n        status: TaskStatus.Active,\r\n\r\n        priority: TaskPriority.None,\r\n\r\n        dueDate:-1,\r\n        deferDate:-1,\r\n\r\n        created: Date.now(),\r\n        modified: Date.now(),\r\n        completed: -1,\r\n      };\r\n      state.taskList.allIds.push(newTaskId);\r\n    },\r\n    selectTask: (state: TaskList, action: PayloadAction<string | null>) => {\r\n      state.selectedTask = action.payload;\r\n    },\r\n    updateTaskTaskName: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.task = action.payload.newName;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskStatus: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.status = action.payload.newStatus;\r\n\r\n      if (task.status === TaskStatus.Complete) {\r\n        task.completed = Date.now();\r\n      } else {\r\n        task.completed = -1;\r\n      }\r\n\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskNote: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.note = action.payload.newNote;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskPriority: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.priority = action.payload.newPriority;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskDeferDate: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.deferDate = action.payload.newDate;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskDueDate: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.dueDate = action.payload.newDate;\r\n      task.modified = Date.now();\r\n    },\r\n    deleteTask: (state: TaskList, action: PayloadAction<any>) => {\r\n      delete state.taskList.byId[action.payload.taskId];\r\n      delete state.taskList.allIds[action.payload.taskId];\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  selectTask,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n  updateTaskTaskPriority,\r\n  updateTaskTaskDeferDate,\r\n  updateTaskTaskDueDate\r\n} = taskListSlice.actions;\r\n\r\nexport const getTasks = (state: RootState) => state.tasks.taskList;\r\nexport const getSelectedTaskId = (state: RootState) => state.tasks.selectedTask;\r\nexport const getSelectedTask = (state: RootState) => {\r\n  const selected = state.tasks.selectedTask\r\n  if(selected !== null) {\r\n    return state.tasks.taskList.byId[selected];\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default taskListSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\nimport TaskFilter from \"./TaskFiltersInterface\";\r\n\r\nconst initialState: TaskFilter = {\r\n  completion: null,\r\n  priority: null,\r\n  hasNote: null,\r\n};\r\n\r\nexport const taskFilterSlice = createSlice({\r\n  name: \"filters\",\r\n  initialState,\r\n  reducers: {\r\n    setCompletionFilter: (\r\n      state: TaskFilter,\r\n      action: PayloadAction<TaskStatus>\r\n    ) => {\r\n      state.completion = action.payload;\r\n    },\r\n    setPriorityFilter: (\r\n      state: TaskFilter,\r\n      action: PayloadAction<TaskPriority>\r\n    ) => {\r\n      state.priority = action.payload;\r\n    },\r\n    setHasNoteFilter: (state: TaskFilter, action: PayloadAction<boolean>) => {\r\n      state.hasNote = action.payload;\r\n    },\r\n    clearAllFilters: (state: TaskFilter) => {\r\n      state.completion = null;\r\n      state.priority = null;\r\n      state.hasNote = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCompletionFilter,\r\n  setPriorityFilter,\r\n  setHasNoteFilter,\r\n  clearAllFilters,\r\n} = taskFilterSlice.actions;\r\n\r\nexport const getFilters = (state: RootState) => state.filters;\r\n\r\nexport default taskFilterSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport TaskFilter, {TaskFilterPreset} from \"../TaskListFilter/TaskFiltersInterface\";\r\nimport { RootState } from \"../../store\"\r\n\r\nconst initialState: TaskFilterPreset = {\r\n  taskFilters: { byId: {}, allIds:[] },\r\n  selectedFilter: null,\r\n}\r\n\r\nexport const taskFilterPresetSlice = createSlice({\r\n  name: \"presets\",\r\n  initialState,\r\n  reducers: {\r\n    addFilterPreset: (state: TaskFilterPreset, action: PayloadAction<TaskFilter>) => {\r\n      const newTaskFilterPresetId = String(state.taskFilters.allIds.length);\r\n\r\n      state.taskFilters.byId[newTaskFilterPresetId] = action.payload;\r\n      state.taskFilters.allIds.push(newTaskFilterPresetId)\r\n    },\r\n    clearFilterPresets: (state: TaskFilterPreset) => {\r\n      state.taskFilters.byId = {}\r\n      state.taskFilters.allIds = []\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  addFilterPreset,\r\n  clearFilterPresets\r\n} = taskFilterPresetSlice.actions;\r\n\r\nexport const getTaskFilterPresets = (state: RootState) => state.presets.taskFilters;\r\n\r\nexport default taskFilterPresetSlice.reducer;","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n// Change this to electron storage when I switch to electron\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport taskReducer from \"./Components/TaskList/TaskListSlice\";\r\nimport taskFilterReducer from \"./Components/TaskListFilter/TaskFilterSlice\";\r\nimport taskFilterPresetReducer from \"./Components/TaskFilterPreset/TaskFilterPresetSlice\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"tasks\", \"presets\"],\r\n};\r\n\r\nconst taskPersistConfig = {\r\n  key: \"tasks\",\r\n  storage,\r\n  blacklist: [\"selectedTask\"],\r\n};\r\n\r\nconst filtersPersistConfig = {\r\n  key: \"filters\",\r\n  storage,\r\n};\r\n\r\nconst presetsPersistConfig = {\r\n  key: \"presets\",\r\n  storage,\r\n}\r\n\r\nconst reducers = combineReducers({\r\n  tasks: persistReducer(taskPersistConfig, taskReducer),\r\n  filters: persistReducer(filtersPersistConfig, taskFilterReducer),\r\n  presets: persistReducer(presetsPersistConfig, taskFilterPresetReducer),\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [thunk],\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../store\";\r\nimport { ChevronRightIcon } from \"@heroicons/react/solid\";\r\n\r\n/**\r\n * Creates a task object for display.\r\n * @param props {Object} Contains the Task object that users will click on. This is the basic unit of all of open-gtd.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TinyTask(props: { taskId: string }) {\r\n  const task = useSelector(\r\n    (state: RootState) => state.tasks.taskList.byId[props.taskId]\r\n  );\r\n\r\n  return (\r\n    <li key={props.taskId}>\r\n      <div className=\"group flex items-center justify-between px-4 py-4 hover:bg-gray-50 sm:px-6 cursor-pointer\">\r\n        <span className=\"flex items-center truncate space-x-3\">\r\n          <span\r\n            className={\"w-2.5 h-2.5 flex-shrink-0 rounded-full\"}\r\n            aria-hidden=\"true\"\r\n          />\r\n          <span className=\"font-medium truncate text-sm leading-6\">\r\n            {task.task}\r\n          </span>\r\n        </span>\r\n        <ChevronRightIcon\r\n          className=\"ml-4 h-5 w-5 text-gray-400 group-hover:text-gray-500 flex-shrink-0\"\r\n          aria-hidden=\"true\"\r\n        />\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TinyTask;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { selectTask, updateTaskTaskStatus } from \"../TaskList/TaskListSlice\";\r\nimport { TaskStatus } from \"./TaskInterface\";\r\nimport {\r\n  DuplicateIcon as DuplicateIconOutline,\r\n  CheckCircleIcon,\r\n  ExclamationCircleIcon,\r\n} from \"@heroicons/react/outline\";\r\n\r\nimport { DuplicateIcon as DuplicateIconSolid } from \"@heroicons/react/solid\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nfunction Task(props: { taskId: string }) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const task = useSelector(\r\n    (state: RootState) => state.tasks.taskList.byId[props.taskId]\r\n  );\r\n\r\n  const setSelectTask = (\r\n    e: React.MouseEvent<HTMLAnchorElement | HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    console.log(e.target);\r\n    console.log(e.currentTarget);\r\n    if (e.target !== e.currentTarget) {\r\n      return;\r\n    }\r\n    dispatch(selectTask(props.taskId));\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(updateTaskTaskStatus({ newStatus: status, taskId: props.taskId }));\r\n  };\r\n\r\n  const taskText = () => (task.task ? task.task : \"Empty task text\");\r\n\r\n  const taskCheckboxIcon = () => {\r\n    const classes = \"text-gray-400 mt-1 h-7 w-7 cursor-pointer\";\r\n    if (task.status === TaskStatus.Active) {\r\n      return (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className={classes}\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n          onClick={() => updateTaskStatus(TaskStatus.Complete)}\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2\"\r\n            // d=\"M15 13l-3 3m0 0l-3-3m3 3V8m0 13a9 9 0 110-18 9 9 0 010 18z\"\r\n            d=\"M 21 12 a 9 9 0 1 1 -18 0 a 9 9 0 0 1 18 0 z\"\r\n          />\r\n        </svg>\r\n      );\r\n    } else if (task.status === TaskStatus.Complete) {\r\n      return (\r\n        <CheckCircleIcon\r\n          className={classes}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    } else if (task.status === TaskStatus.Dropped) {\r\n      return (\r\n        <ExclamationCircleIcon\r\n          className={classes}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const noteIcon = () => {\r\n    const classes =\r\n      \"w-8 h-8 bg-white inline-flex items-center justify-center text-gray-400 rounded-full \";\r\n\r\n    if (task.note) {\r\n      return (\r\n        <CopyToClipboard text={task.note}>\r\n          <DuplicateIconSolid\r\n            className={`${classes}hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled`}\r\n          />\r\n        </CopyToClipboard>\r\n      );\r\n    } else {\r\n      return <DuplicateIconOutline className={`${classes}`} />;\r\n    }\r\n  };\r\n\r\n  const priorityIcon = () => {\r\n    return (\r\n      <div\r\n        className=\"inline rounded-xl border border-gray-500 px-2 py-0.5 text-gray-500\"\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        {task.priority}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const formatTaskDates = (date: number | null) => {\r\n    if (date) {\r\n      return new Date(date).toLocaleDateString(\"en-us\");\r\n    } else {\r\n      return \"-\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <tr key={props.taskId} onClick={(e) => setSelectTask(e)}>\r\n      <td className=\"px-6 py-0.5 text-sm text-gray-500 font-medium\">\r\n        {taskCheckboxIcon()}\r\n      </td>\r\n      {/* Task Name */}\r\n      <td\r\n        className=\"px-6 py-0.5 max-w-0 w-full whitespace-nowrap text-sm font-medium text-gray-900 cursor-pointer\"\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        <div className=\"flex items-center\" onClick={(e) => setSelectTask(e)}>\r\n          <div\r\n            className={\"flex-shrink-0 w-2.5 h-2.5 rounded-full\"}\r\n            aria-hidden=\"true\"\r\n          />\r\n          <div\r\n            className=\"truncate hover:text-gray-600 cursor-pointer\"\r\n            onClick={(e) => setSelectTask(e)}\r\n          >\r\n            {taskText()}\r\n          </div>\r\n        </div>\r\n      </td>\r\n      {/* Members */}\r\n      <td className=\"py-0.5 text-sm text-gray-500 font-medium text-center\">\r\n        {priorityIcon()}\r\n      </td>\r\n      {/* Last Modified */}\r\n      <td className=\"hidden md:table-cell px-6 py-0.5 whitespace-nowrap text-sm text-gray-500 text-right\">\r\n        {formatTaskDates(task.modified)}\r\n      </td>\r\n      {/* Options */}\r\n      <td className=\"pr-6\">\r\n        <div className=\"relative flex justify-end items-center\">\r\n          <span className=\"sr-only\">Copy Note</span>\r\n          {noteIcon()}\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import { useSelector } from \"react-redux\";\r\nimport { Fragment } from \"react\";\r\nimport { getTasks } from \"./TaskListSlice\";\r\nimport TinyTask from \"../Task/TinyTask\";\r\nimport Task from \"../Task/Task\";\r\nimport { getFilters } from \"../TaskListFilter/TaskFilterSlice\";\r\n\r\n/**\r\n * Creates the Task Rows for the main task UI.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskList() {\r\n  const taskList = useSelector(getTasks);\r\n  const taskListFilters = useSelector(getFilters);\r\n\r\n  const getTaskById = (taskId: string) => taskList.byId[taskId];\r\n\r\n  const hasNoteFilter = (taskId: string) => {\r\n    if (taskListFilters.hasNote) {\r\n      return getTaskById(taskId).note !== \"\";\r\n    } else if (taskListFilters.hasNote === false) {\r\n      return getTaskById(taskId).note === \"\";\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const priorityFilter = (taskId: string) => {\r\n    if (taskListFilters.priority) {\r\n      return taskListFilters.priority === getTaskById(taskId).priority;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const completionFilter = (taskId: string) => {\r\n    if (taskListFilters.completion) {\r\n      return taskListFilters.completion === getTaskById(taskId).status;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const buildTinyTaskList = () => {\r\n    if (taskList.allIds) {\r\n      return taskList.allIds\r\n        .filter(completionFilter)\r\n        .filter(priorityFilter)\r\n        .filter(hasNoteFilter)\r\n        .map((taskId, index) => {\r\n          return <TinyTask taskId={taskId} key={index} />;\r\n        });\r\n    }\r\n  };\r\n\r\n  const buildTaskList = () => {\r\n    if (taskList.allIds) {\r\n      return taskList.allIds\r\n        .filter(completionFilter)\r\n        .filter(priorityFilter)\r\n        .filter(hasNoteFilter)\r\n        .map((taskId, index) => {\r\n          return <Task taskId={taskId} key={index} />;\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Projects list (only on smallest breakpoint) */}\r\n      <div className=\"mt-10 sm:hidden\">\r\n        <div className=\"px-4 sm:px-6\">\r\n          <h2 className=\"text-gray-500 text-xs font-medium uppercase tracking-wide\">\r\n            Projects\r\n          </h2>\r\n        </div>\r\n        <ul className=\"mt-3 border-t border-gray-200 divide-y divide-gray-100\">\r\n          {buildTinyTaskList()}\r\n        </ul>\r\n      </div>\r\n      {/* Projects table (small breakpoint and up) */}\r\n      <div className=\"hidden sm:block\">\r\n        <div className=\"align-middle inline-block min-w-full border-b border-gray-200\">\r\n          <table className=\"min-w-full\">\r\n            <thead>\r\n              <tr className=\"border-t border-gray-200\">\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  <span className=\"lg:pl-2\">Task</span>\r\n                </th>\r\n                <th className=\"px-12 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Priority\r\n                </th>\r\n                <th className=\"hidden md:table-cell px-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Last updated\r\n                </th>\r\n                <th className=\"pr-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\" />\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-100\">\r\n              {buildTaskList()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","import { ChangeEvent } from \"react\";\r\nimport { TaskPriority } from \"../Task/TaskInterface\";\r\nimport { updateTaskTaskPriority } from \"../TaskList/TaskListSlice\";\r\n\r\nconst priorityOptions = [\r\n  { value: TaskPriority.None, label: TaskPriority.None },\r\n  { value: TaskPriority.Low, label: TaskPriority.Low },\r\n  { value: TaskPriority.Medium, label: TaskPriority.Medium },\r\n  { value: TaskPriority.High, label: TaskPriority.High },\r\n  { value: TaskPriority.Immediate, label: TaskPriority.Immediate },\r\n];\r\n\r\nfunction PrioritySelect(\r\n  dispatch: any,\r\n  selectedTaskId: string,\r\n  currentPriority: TaskPriority\r\n) {\r\n  const updateTaskPriority = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    dispatch(\r\n      updateTaskTaskPriority({\r\n        newPriority: e.target.value,\r\n        taskId: selectedTaskId,\r\n      })\r\n    );\r\n  };\r\n\r\n  const buildOptionsList = () => {\r\n    return priorityOptions.map((value) => {\r\n      return (\r\n        <option\r\n          className=\"w-full rounded\"\r\n          value={value.value}\r\n          key={value.value}\r\n        >\r\n          {value.label}\r\n        </option>\r\n      );\r\n    });\r\n  };\r\n\r\n  // TODO: Change this to use divs and a's instead of being a select\r\n  return (\r\n    <select\r\n      className=\"mt-1 w-full border border-gray-600 rounded-md focus:outline-none hover:ring-2 hover:ring-gray-600\"\r\n      onChange={(e) => updateTaskPriority(e)}\r\n      id=\"selectedTaskPrioritySelect\"\r\n      value={currentPriority}\r\n    >\r\n      {buildOptionsList()}\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default PrioritySelect;\r\n","function ButtonGroup(\r\n  buttonGroupSelectedOption: any,\r\n  onClickArg: Function,\r\n  options: any[],\r\n  idPrefix: string\r\n) {\r\n  const buttonIsActive = (option: any) => {\r\n    if (buttonGroupSelectedOption === option) {\r\n      return \"font-semibold bg-gray-700 text-gray-100\";\r\n    } else {\r\n      return \"bg-gray-100 text-gray-700 hover:text-gray-700 hover:bg-gray-300\";\r\n    }\r\n  };\r\n\r\n  const convertOptionText = (option: any) => {\r\n    if (option === null) {\r\n      return \"Select All\";\r\n    } else if (option === true) {\r\n      return \"True\";\r\n    } else if (option === false) {\r\n      return \"False\";\r\n    } else {\r\n      return option;\r\n    }\r\n  };\r\n\r\n  const leftButton = () => {\r\n    const buttonText = options[0];\r\n\r\n    return (\r\n      <button\r\n        className={`${buttonIsActive(\r\n          buttonText\r\n        )} border border-gray-600 flex-auto rounded-l duration-200 ease-in-out transition focus:outline-none hover:ring-2 hover:ring-gray-700`}\r\n        id={`${idPrefix}${buttonText}Button`}\r\n        onClick={() => onClickArg(buttonText)}\r\n        key={buttonText}\r\n      >\r\n        {convertOptionText(buttonText)}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const middleButtons = () => {\r\n    return options.slice(1, options.length - 1).map((buttonText, index) => {\r\n      return (\r\n        <button\r\n          className={`${buttonIsActive(\r\n            buttonText\r\n          )} border border-gray-600 flex-auto duration-200 ease-in-out transition focus:outline-none hover:ring-2 hover:ring-gray-700`}\r\n          id={`${idPrefix}${buttonText}Button`}\r\n          onClick={() => onClickArg(buttonText)}\r\n          key={buttonText}\r\n        >\r\n          {convertOptionText(buttonText)}\r\n        </button>\r\n      );\r\n    });\r\n  };\r\n\r\n  const rightButton = () => {\r\n    const buttonText = options[options.length - 1];\r\n    return (\r\n      <button\r\n        className={`${buttonIsActive(\r\n          buttonText\r\n        )} border border-gray-600 flex-auto rounded-r duration-200 ease-in-out transition focus:outline-none hover:ring-2 hover:ring-gray-600`}\r\n        id={`${idPrefix}${buttonText}Button`}\r\n        onClick={() => onClickArg(buttonText)}\r\n        key={buttonText}\r\n      >\r\n        {convertOptionText(buttonText)}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-row\">\r\n      {leftButton()}\r\n      {middleButtons()}\r\n      {rightButton()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonGroup;\r\n","import { ChangeEvent, useState, Fragment, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Task, { TaskStatus } from \"../Task/TaskInterface\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport { Transition, Dialog } from \"@headlessui/react\";\r\nimport { XIcon } from \"@heroicons/react/outline\";\r\n\r\nimport {\r\n  getSelectedTask,\r\n  getSelectedTaskId,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n  updateTaskTaskDeferDate,\r\n  updateTaskTaskDueDate,\r\n} from \"../TaskList/TaskListSlice\";\r\n\r\nimport PrioritySelect from \"./PrioritySelect\";\r\nimport ButtonGroup from \"../ButtonGroup/ButtonGroup\";\r\n/**\r\n * After clicking on a task in\r\n * @returns {FunctionComponent}\r\n */\r\nfunction SelectedTask() {\r\n  const selectedTaskId = useSelector(getSelectedTaskId);\r\n  const selectedTask: Task | null = useSelector(getSelectedTask);\r\n  const dispatch = useAppDispatch();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (selectedTaskId !== \"-1\") {\r\n      setOpen(true);\r\n    } else {\r\n      setOpen(false);\r\n    }\r\n  }, [selectedTaskId]);\r\n\r\n  const updateTaskName = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(\r\n      updateTaskTaskName({ newName: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(\r\n      updateTaskTaskStatus({ newStatus: status, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskNote = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(\r\n      updateTaskTaskNote({ newNote: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskDeferDate = (e: Date) => {\r\n    const newDate = e ? e.getTime() : null;\r\n    dispatch(\r\n      updateTaskTaskDeferDate({ newDate: newDate, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskDueDate = (e: Date) => {\r\n    const newDate = e ? e.getTime() : null;\r\n    dispatch(\r\n      updateTaskTaskDueDate({ newDate: newDate, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  // Early returns here to avoid having the selected task stay open at all times\r\n  if (\r\n    selectedTask === undefined ||\r\n    selectedTask === null ||\r\n    selectedTaskId === null\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const styleDates = (date: number) => {\r\n    if (date > 0) {\r\n      return new Date(date).toLocaleString(\"en-us\");\r\n    } else {\r\n      return \"N/A\";\r\n    }\r\n  };\r\n\r\n  const taskSubsectionHeader = (subsectionHeader: string) => {\r\n    return <div className=\"pt-1 font-bold text-lg\">{subsectionHeader}</div>;\r\n  };\r\n\r\n  const datepicker = (\r\n    date: number | null,\r\n    dateChangeFunction: Function,\r\n    placeholderText: string\r\n  ) => {\r\n    const chosenDate = date ? new Date(date) : null;\r\n    return (\r\n      <DatePicker\r\n        selected={chosenDate}\r\n        onChange={(date) => dateChangeFunction(date)}\r\n        isClearable\r\n        placeholderText={placeholderText}\r\n        dateFormat=\"MM/dd/yyyy\"\r\n        className=\"border rounded w-full\"\r\n        todayButton=\"Today\"\r\n        openToDate={new Date(Date.now())}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Transition.Root show={open} as={Fragment}>\r\n      <Dialog\r\n        as=\"div\"\r\n        static\r\n        className=\"fixed inset-0 overflow-hidden\"\r\n        open={open}\r\n        onClose={setOpen}\r\n      >\r\n        <div className=\"absolute inset-0 overflow-hidden\">\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"ease-in-out duration-500\"\r\n            enterFrom=\"opacity-0\"\r\n            enterTo=\"opacity-100\"\r\n            leave=\"ease-in-out duration-500\"\r\n            leaveFrom=\"opacity-100\"\r\n            leaveTo=\"opacity-0\"\r\n          >\r\n            <Dialog.Overlay className=\"absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\r\n          </Transition.Child>\r\n\r\n          <div className=\"fixed inset-y-0 right-0 pl-10 max-w-full flex\">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"transform transition ease-in-out duration-500 sm:duration-700\"\r\n              enterFrom=\"translate-x-full\"\r\n              enterTo=\"translate-x-0\"\r\n              leave=\"transform transition ease-in-out duration-500 sm:duration-700\"\r\n              leaveFrom=\"translate-x-0\"\r\n              leaveTo=\"translate-x-full\"\r\n            >\r\n              <div className=\"w-screen max-w-md\">\r\n                <div className=\"h-full flex flex-col py-6 bg-white shadow-xl overflow-y-scroll\">\r\n                  <div className=\"px-4 sm:px-6\">\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <Dialog.Title className=\"flex-grow text-lg font-medium text-gray-900\">\r\n                        <label\r\n                          htmlFor=\"task\"\r\n                          className=\"block text-sm font-medium text-gray-700\"\r\n                        >\r\n                          Task\r\n                        </label>\r\n                        <div className=\"mt-1\">\r\n                          <textarea\r\n                            id=\"task\"\r\n                            name=\"task\"\r\n                            rows={4}\r\n                            value={selectedTask.task}\r\n                            onChange={(e) => updateTaskName(e)}\r\n                            className=\"max-w-lg shadow-sm block w-full focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md\"\r\n                            placeholder=\"Empty Task Text\"\r\n                          />\r\n                        </div>\r\n                      </Dialog.Title>\r\n                      <div className=\"ml-3 h-7 flex items-center\">\r\n                        <button\r\n                          className=\"bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                          onClick={() => setOpen(false)}\r\n                        >\r\n                          <span className=\"sr-only\">Close panel</span>\r\n                          <XIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"mt-6 relative flex-1 px-4 sm:px-6\">\r\n                    {/* Replace with your content */}\r\n                    <div className=\"absolute inset-0 px-4 sm:px-6\">\r\n                      {/* Button Group */}\r\n                      <div className=\"w-full pb-2\">\r\n                        {taskSubsectionHeader(\"Task Status\")}\r\n                        {ButtonGroup(\r\n                          selectedTask.status,\r\n                          updateTaskStatus,\r\n                          [\r\n                            TaskStatus.Active,\r\n                            TaskStatus.Complete,\r\n                            TaskStatus.Dropped,\r\n                          ],\r\n                          \"selectedTask\"\r\n                        )}\r\n                      </div>\r\n                      {/* Tags */}\r\n                      <div className=\"w-full pb-2\">\r\n                        {taskSubsectionHeader(\"Tags\")}\r\n                        Not Implemented\r\n                      </div>\r\n                      {/* Priority */}\r\n                      <div className=\"w-full pb-2\">\r\n                        {taskSubsectionHeader(\"Priority\")}\r\n                        {PrioritySelect(\r\n                          dispatch,\r\n                          selectedTaskId,\r\n                          selectedTask.priority\r\n                        )}\r\n                      </div>\r\n                      {/* Defer/Due Dates */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Defer / Due Dates\")}\r\n                        <div className=\"w-full\">\r\n                          {datepicker(\r\n                            selectedTask.deferDate,\r\n                            updateTaskDeferDate,\r\n                            \"Defer Date\"\r\n                          )}\r\n                        </div>\r\n                        <div className=\"w-full\">\r\n                          {datepicker(\r\n                            selectedTask.dueDate,\r\n                            updateTaskDueDate,\r\n                            \"Due Date\"\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      {/* Note */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Task Note\")}\r\n                        <TextareaAutosize\r\n                          className=\"w-full border border-gray-600 rounded-md my-1 resize-y px-1 hover:ring-2 hover:ring-gray-600 focus:outline-none\"\r\n                          placeholder=\"Note\"\r\n                          id=\"selectedTaskNote\"\r\n                          value={selectedTask.note}\r\n                          onChange={(e) => updateTaskNote(e)}\r\n                        />\r\n                      </div>\r\n                      {/* Dates */}\r\n                      <div className=\"w-full py-2\">\r\n                        {taskSubsectionHeader(\"Task Dates\")}\r\n                        <div>\r\n                          <div className=\"inline font-bold\">Created: </div>\r\n                          <div id=\"selectedTaskCreated\" className=\"inline\">\r\n                            {styleDates(selectedTask.created)}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"inline font-bold\">Modified: </div>\r\n                          <div id=\"selectedTaskModified\" className=\"inline\">\r\n                            {styleDates(selectedTask.modified)}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"inline font-bold\">Completed: </div>\r\n                          <div id=\"selectedTaskCompleted\" className=\"inline\">\r\n                            {styleDates(selectedTask.completed)}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    {/* /End replace */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Transition.Child>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  );\r\n}\r\n\r\nexport default SelectedTask;\r\n","import { Menu, Transition } from \"@headlessui/react\";\r\nimport { SelectorIcon } from \"@heroicons/react/solid\";\r\nimport { Fragment } from \"react\";\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction UserProfileDropdown() {\r\n  return (\r\n    <Menu as=\"div\" className=\"px-3 mt-6 relative inline-block text-left\">\r\n      {({ open }) => (\r\n        <>\r\n          <div>\r\n            <Menu.Button className=\"group w-full bg-gray-100 rounded-md px-3.5 py-2 text-sm text-left font-medium text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-purple-500\">\r\n              <span className=\"flex w-full justify-between items-center\">\r\n                <span className=\"flex min-w-0 items-center justify-between space-x-3\">\r\n                  <img\r\n                    className=\"w-10 h-10 bg-gray-300 rounded-full flex-shrink-0\"\r\n                    src=\"https://avatars.githubusercontent.com/u/9056294?s=400&u=ec70834818e3ea5d1423849ad4f8507d8deed970&v=4\"\r\n                    alt=\"\"\r\n                  />\r\n                  <span className=\"flex-1 flex flex-col min-w-0\">\r\n                    <span className=\"text-gray-900 text-sm font-medium truncate\">\r\n                      Will Mitchell\r\n                    </span>\r\n                    <span className=\"text-gray-500 text-sm truncate\">\r\n                      @will_mitch\r\n                    </span>\r\n                  </span>\r\n                </span>\r\n                <SelectorIcon\r\n                  className=\"flex-shrink-0 h-5 w-5 text-gray-400 group-hover:text-gray-500\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            </Menu.Button>\r\n          </div>\r\n          <Transition\r\n            show={open}\r\n            as={Fragment}\r\n            enter=\"transition ease-out duration-100\"\r\n            enterFrom=\"transform opacity-0 scale-95\"\r\n            enterTo=\"transform opacity-100 scale-100\"\r\n            leave=\"transition ease-in duration-75\"\r\n            leaveFrom=\"transform opacity-100 scale-100\"\r\n            leaveTo=\"transform opacity-0 scale-95\"\r\n          >\r\n            <Menu.Items\r\n              static\r\n              className=\"z-10 mx-3 origin-top absolute right-0 left-0 mt-1 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-200 focus:outline-none\"\r\n            >\r\n              <div className=\"py-1\">\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      View profile - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Settings - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Notifications - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n              </div>\r\n              <div className=\"py-1\">\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Get desktop app - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Support - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n              </div>\r\n              <div className=\"py-1\">\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Logout - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n              </div>\r\n            </Menu.Items>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default UserProfileDropdown;\r\n","import UserProfileDropdown from \"../UserProfileDropdown\";\r\nimport { HomeIcon, SearchIcon } from \"@heroicons/react/outline\";\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nconst navigation = [\r\n  { name: \"Tasks\", href: \"#\", icon: HomeIcon, current: true },\r\n];\r\n\r\nconst teams = [\r\n  { name: \"Doesn't Do Anything\", href: \"#\", bgColorClass: \"bg-indigo-500\" },\r\n];\r\n\r\n/**\r\n * Returns the Sidebar component\r\n * @return {FunctionComponent}\r\n */\r\nfunction Sidebar(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  return (\r\n    <div className=\"hidden lg:flex lg:flex-shrink-0\">\r\n      <div className=\"flex flex-col w-64 border-r border-gray-200 pt-5 pb-4 bg-gray-100\">\r\n        <div className=\"flex items-center flex-shrink-0 px-6\">\r\n          <img\r\n            className=\"h-8 w-auto\"\r\n            src=\"https://tailwindui.com/img/logos/workflow-logo-purple-500-mark-gray-700-text.svg\"\r\n            alt=\"Workflow\"\r\n          />\r\n        </div>\r\n        {/* Sidebar component, swap this element with another sidebar if you like */}\r\n        <div className=\"h-0 flex-1 flex flex-col overflow-y-auto\">\r\n          {/* User account dropdown */}\r\n          {UserProfileDropdown()}\r\n          {/* Sidebar Search */}\r\n          <div className=\"px-3 mt-5\">\r\n            <label htmlFor=\"search\" className=\"sr-only\">\r\n              Search\r\n            </label>\r\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n              <div\r\n                className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <SearchIcon\r\n                  className=\"mr-3 h-4 w-4 text-gray-400\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                className=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-9 sm:text-sm border-gray-300 rounded-md\"\r\n                placeholder=\"Search\"\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* Navigation */}\r\n          <nav className=\"px-3 mt-6\">\r\n            <div className=\"space-y-1\">\r\n              {navigation.map((item) => (\r\n                <a\r\n                  key={item.name}\r\n                  href={item.href}\r\n                  className={classNames(\r\n                    item.current\r\n                      ? \"bg-gray-200 text-gray-900\"\r\n                      : \"text-gray-700 hover:text-gray-900 hover:bg-gray-50\",\r\n                    \"group flex items-center px-2 py-2 text-sm font-medium rounded-md\"\r\n                  )}\r\n                  aria-current={item.current ? \"page\" : undefined}\r\n                >\r\n                  <item.icon\r\n                    className={classNames(\r\n                      item.current\r\n                        ? \"text-gray-500\"\r\n                        : \"text-gray-400 group-hover:text-gray-500\",\r\n                      \"mr-3 h-6 w-6\"\r\n                    )}\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                  {item.name}\r\n                </a>\r\n              ))}\r\n            </div>\r\n            <div className=\"mt-8\">\r\n              {/* Secondary navigation */}\r\n              <h3\r\n                className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider\"\r\n                id=\"teams-headline\"\r\n              >\r\n                Teams\r\n              </h3>\r\n              <div\r\n                className=\"mt-1 space-y-1\"\r\n                role=\"group\"\r\n                aria-labelledby=\"teams-headline\"\r\n              >\r\n                {teams.map((team) => (\r\n                  <a\r\n                    key={team.name}\r\n                    href={team.href}\r\n                    className=\"group flex items-center px-3 py-2 text-sm font-medium text-gray-700 rounded-md hover:text-gray-900 hover:bg-gray-50\"\r\n                  >\r\n                    <span\r\n                      className={classNames(\r\n                        team.bgColorClass,\r\n                        \"w-2.5 h-2.5 mr-4 rounded-full\"\r\n                      )}\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <span className=\"truncate\">{team.name}</span>\r\n                  </a>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import { Fragment } from \"react\";\r\nimport { Dialog, Transition } from \"@headlessui/react\";\r\nimport { HomeIcon, XIcon } from \"@heroicons/react/solid\";\r\n\r\nconst navigation = [\r\n  { name: \"Tasks\", href: \"#\", icon: HomeIcon, current: true },\r\n];\r\n\r\nconst teams = [\r\n  { name: \"Doesn't Do Anything\", href: \"#\", bgColorClass: \"bg-indigo-500\" },\r\n];\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction MobileSidebar(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  return (\r\n    <Transition.Root show={sidebarOpen} as={Fragment}>\r\n      <Dialog\r\n        as=\"div\"\r\n        static\r\n        className=\"fixed inset-0 flex z-40 lg:hidden\"\r\n        open={sidebarOpen}\r\n        onClose={() => setSidebarOpen(!sidebarOpen)}\r\n      >\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"transition-opacity ease-linear duration-300\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"transition-opacity ease-linear duration-300\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <Dialog.Overlay className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" />\r\n        </Transition.Child>\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"transition ease-in-out duration-300 transform\"\r\n          enterFrom=\"-translate-x-full\"\r\n          enterTo=\"translate-x-0\"\r\n          leave=\"transition ease-in-out duration-300 transform\"\r\n          leaveFrom=\"translate-x-0\"\r\n          leaveTo=\"-translate-x-full\"\r\n        >\r\n          <div className=\"relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-white\">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-in-out duration-300\"\r\n              enterFrom=\"opacity-0\"\r\n              enterTo=\"opacity-100\"\r\n              leave=\"ease-in-out duration-300\"\r\n              leaveFrom=\"opacity-100\"\r\n              leaveTo=\"opacity-0\"\r\n            >\r\n              <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\r\n                <button\r\n                  className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\"\r\n                  onClick={() => setSidebarOpen(false)}\r\n                >\r\n                  <span className=\"sr-only\">Close sidebar</span>\r\n                  <XIcon className=\"h-6 w-6 text-white\" aria-hidden=\"true\" />\r\n                </button>\r\n              </div>\r\n            </Transition.Child>\r\n            <div className=\"flex-shrink-0 flex items-center px-4\">\r\n              <img\r\n                className=\"h-8 w-auto\"\r\n                src=\"https://tailwindui.com/img/logos/workflow-logo-purple-500-mark-gray-700-text.svg\"\r\n                alt=\"Workflow\"\r\n              />\r\n            </div>\r\n            <div className=\"mt-5 flex-1 h-0 overflow-y-auto\">\r\n              <nav className=\"px-2\">\r\n                <div className=\"space-y-1\">\r\n                  {navigation.map((item) => (\r\n                    <a\r\n                      key={item.name}\r\n                      href={item.href}\r\n                      className={classNames(\r\n                        item.current\r\n                          ? \"bg-gray-100 text-gray-900\"\r\n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\",\r\n                        \"group flex items-center px-2 py-2 text-base leading-5 font-medium rounded-md\"\r\n                      )}\r\n                      aria-current={item.current ? \"page\" : undefined}\r\n                    >\r\n                      <item.icon\r\n                        className={classNames(\r\n                          item.current\r\n                            ? \"text-gray-500\"\r\n                            : \"text-gray-400 group-hover:text-gray-500\",\r\n                          \"mr-3 h-6 w-6\"\r\n                        )}\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      {item.name}\r\n                    </a>\r\n                  ))}\r\n                </div>\r\n                <div className=\"mt-8\">\r\n                  <h3\r\n                    className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider\"\r\n                    id=\"teams-headline\"\r\n                  >\r\n                    Teams\r\n                  </h3>\r\n                  <div\r\n                    className=\"mt-1 space-y-1\"\r\n                    role=\"group\"\r\n                    aria-labelledby=\"teams-headline\"\r\n                  >\r\n                    {teams.map((team) => (\r\n                      <a\r\n                        key={team.name}\r\n                        href={team.href}\r\n                        className=\"group flex items-center px-3 py-2 text-base leading-5 font-medium text-gray-600 rounded-md hover:text-gray-900 hover:bg-gray-50\"\r\n                      >\r\n                        <span\r\n                          className={classNames(\r\n                            team.bgColorClass,\r\n                            \"w-2.5 h-2.5 mr-4 rounded-full\"\r\n                          )}\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                        <span className=\"truncate\">{team.name}</span>\r\n                      </a>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </nav>\r\n            </div>\r\n          </div>\r\n        </Transition.Child>\r\n        <div className=\"flex-shrink-0 w-14\" aria-hidden=\"true\">\r\n          {/* Dummy element to force sidebar to shrink to fit close icon */}\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  );\r\n}\r\n\r\nexport default MobileSidebar;\r\n","import { Fragment } from \"react\";\r\nimport { MenuAlt1Icon } from \"@heroicons/react/outline\";\r\nimport { SearchIcon } from \"@heroicons/react/solid\";\r\nimport { Menu, Transition } from \"@headlessui/react\";\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction SearchHeader(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  return (\r\n    <div className=\"relative z-10 flex-shrink-0 flex h-16 bg-white border-b border-gray-200 lg:hidden\">\r\n      <button\r\n        className=\"px-4 border-r border-gray-200 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500 lg:hidden\"\r\n        onClick={() => setSidebarOpen(true)}\r\n      >\r\n        <span className=\"sr-only\">Open sidebar</span>\r\n        <MenuAlt1Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n      </button>\r\n      <div className=\"flex-1 flex justify-between px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex-1 flex\">\r\n          <form className=\"w-full flex md:ml-0\" action=\"#\" method=\"GET\">\r\n            <label htmlFor=\"search_field\" className=\"sr-only\">\r\n              Search\r\n            </label>\r\n            <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n              <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                <SearchIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n              </div>\r\n              <input\r\n                id=\"search_field\"\r\n                name=\"search_field\"\r\n                className=\"block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-0 focus:border-transparent focus:placeholder-gray-400 sm:text-sm\"\r\n                placeholder=\"Search\"\r\n                type=\"search\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"flex items-center\">\r\n          {/* Profile dropdown */}\r\n          <Menu as=\"div\" className=\"ml-3 relative\">\r\n            {({ open }) => (\r\n              <>\r\n                <div>\r\n                  <Menu.Button className=\"max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\">\r\n                    <span className=\"sr-only\">Open user menu</span>\r\n                    <img\r\n                      className=\"h-8 w-8 rounded-full\"\r\n                      src=\"https://avatars.githubusercontent.com/u/9056294?s=400&u=ec70834818e3ea5d1423849ad4f8507d8deed970&v=4\"\r\n                      alt=\"\"\r\n                    />\r\n                  </Menu.Button>\r\n                </div>\r\n                <Transition\r\n                  show={open}\r\n                  as={Fragment}\r\n                  enter=\"transition ease-out duration-100\"\r\n                  enterFrom=\"transform opacity-0 scale-95\"\r\n                  enterTo=\"transform opacity-100 scale-100\"\r\n                  leave=\"transition ease-in duration-75\"\r\n                  leaveFrom=\"transform opacity-100 scale-100\"\r\n                  leaveTo=\"transform opacity-0 scale-95\"\r\n                >\r\n                  <Menu.Items\r\n                    static\r\n                    className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-200 focus:outline-none\"\r\n                  >\r\n                    <div className=\"py-1\">\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            View profile\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Settings\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Notifications\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                    </div>\r\n                    <div className=\"py-1\">\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Get Desktop App\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Support\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                    </div>\r\n                    <div className=\"py-1\">\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Logout\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                    </div>\r\n                  </Menu.Items>\r\n                </Transition>\r\n              </>\r\n            )}\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchHeader;\r\n","import React, { ChangeEvent, Fragment, useState } from \"react\";\r\nimport { Disclosure, Transition } from \"@headlessui/react\";\r\n\r\nimport { addTask } from \"../../TaskList/TaskListSlice\";\r\nimport { CheckCircleIcon } from \"@heroicons/react/outline\";\r\nimport { useAppDispatch } from \"../../../hooks\";\r\n\r\n/**\r\n * Returns the AddNewTask Button, and the input it controls\r\n * @return {FunctionComponent}\r\n */\r\nfunction AddNewTask() {\r\n  const [taskText, setTaskText] = useState(\"\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const createNewTask = () => {\r\n    dispatch(addTask(taskText.trim()));\r\n    setTaskText(\"\");\r\n  };\r\n\r\n  const onEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\" && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      createNewTask();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Disclosure>\r\n      {({ open }) => (\r\n        <>\r\n          <Disclosure.Button\r\n            type=\"button\"\r\n            className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-1 ml-3\"\r\n          >\r\n            Add New Task\r\n          </Disclosure.Button>\r\n          <Transition\r\n            show={open}\r\n            as={Fragment}\r\n            enter=\"transition ease-out duration-75\"\r\n            enterFrom=\"transform opacity-0 scale-95\"\r\n            enterTo=\"transform opacity-100 scale-100\"\r\n            leave=\"transition ease-in duration-75\"\r\n            leaveFrom=\"transform opacity-100 scale-100\"\r\n            leaveTo=\"transform opacity-0 scale-95\"\r\n          >\r\n            <Disclosure.Panel static>\r\n              <div className=\"flex flex-row relative order-2\">\r\n                <input\r\n                  className=\"ml-4 px-4 border border-purple-500 rounded-md font-medium text-sm shadow-sm focus:ring-purple-500 focus:outline-none\"\r\n                  type=\"text\"\r\n                  id=\"addTaskInput\"\r\n                  placeholder=\"Enter new task\"\r\n                  value={taskText}\r\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                    setTaskText(e.target.value)\r\n                  }\r\n                  onKeyDown={(e) => onEnterPress(e)}\r\n                />\r\n                <button\r\n                  className=\"absolute inset-y-0 right-0 pl-3 pr-3 flex items-center bg-purple-500 rounded rounded-l-none\"\r\n                  onClick={() => createNewTask()}\r\n                >\r\n                  <CheckCircleIcon className=\"h-5 w-5 text-white\" />\r\n                </button>\r\n              </div>\r\n            </Disclosure.Panel>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Disclosure>\r\n  );\r\n}\r\n\r\nexport default AddNewTask;\r\n","import AddNewTask from \"./AddNewTask/AddNewTask\";\r\n\r\nfunction TaskHeader() {\r\n  return (\r\n    <div className=\"border-b border-gray-200 px-4 py-4 sm:flex sm:items-center sm:justify-between sm:px-6 lg:px-8\">\r\n      <div className=\"flex-1 min-w-0\">\r\n        <h1 className=\"text-lg font-medium leading-6 text-gray-900 sm:truncate\">\r\n          Home\r\n        </h1>\r\n      </div>\r\n      <div className=\"mt-4 flex sm:mt-0 sm:ml-4\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"ml-3 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-0 sm:ml-0\"\r\n        >\r\n          Share\r\n        </button>\r\n        {AddNewTask()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskHeader;\r\n","import { Fragment } from \"react\";\r\n\r\nimport { Menu, Transition } from \"@headlessui/react\";\r\nimport { DotsVerticalIcon } from \"@heroicons/react/solid\";\r\n\r\nconst projects = [\r\n  {\r\n    id: 1,\r\n    title: \"Does Nothing\",\r\n    initials: \"GA\",\r\n    team: \"Engineering\",\r\n    members: [\r\n      {\r\n        name: \"Dries Vincent\",\r\n        handle: \"driesvincent\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n      {\r\n        name: \"Lindsay Walton\",\r\n        handle: \"lindsaywalton\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n      {\r\n        name: \"Courtney Henry\",\r\n        handle: \"courtneyhenry\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n      {\r\n        name: \"Tom Cook\",\r\n        handle: \"tomcook\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n    ],\r\n    totalMembers: 12,\r\n    lastUpdated: \"March 17, 2020\",\r\n    pinned: true,\r\n    bgColorClass: \"bg-pink-600\",\r\n  },\r\n  // More projects...\r\n];\r\nconst pinnedProjects = projects.filter((project) => project.pinned);\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\nfunction PinnedProjects() {\r\n  return (\r\n    <div className=\"px-4 mt-6 sm:px-6 lg:px-8\">\r\n      <h2 className=\"text-gray-500 text-xs font-medium uppercase tracking-wide\">\r\n        Pinned Projects\r\n      </h2>\r\n      <ul className=\"grid grid-cols-1 gap-4 sm:gap-6 sm:grid-cols-2 xl:grid-cols-4 mt-3\">\r\n        {pinnedProjects.map((project) => (\r\n          <li\r\n            key={project.id}\r\n            className=\"relative col-span-1 flex shadow-sm rounded-md\"\r\n          >\r\n            <div\r\n              className={classNames(\r\n                project.bgColorClass,\r\n                \"flex-shrink-0 flex items-center justify-center w-16 text-white text-sm font-medium rounded-l-md\"\r\n              )}\r\n            >\r\n              {project.initials}\r\n            </div>\r\n            <div className=\"flex-1 flex items-center justify-between border-t border-r border-b border-gray-200 bg-white rounded-r-md truncate\">\r\n              <div className=\"flex-1 px-4 py-2 text-sm truncate\">\r\n                <div className=\"text-gray-900 font-medium hover:text-gray-600\">\r\n                  {project.title}\r\n                </div>\r\n                <p className=\"text-gray-500\">{project.totalMembers} Members</p>\r\n              </div>\r\n              <Menu as=\"div\" className=\"flex-shrink-0 pr-2\">\r\n                {({ open }) => (\r\n                  <>\r\n                    <Menu.Button className=\"w-8 h-8 bg-white inline-flex items-center justify-center text-gray-400 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\">\r\n                      <span className=\"sr-only\">Open options</span>\r\n                      <DotsVerticalIcon\r\n                        className=\"w-5 h-5\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                    </Menu.Button>\r\n                    <Transition\r\n                      show={open}\r\n                      as={Fragment}\r\n                      enter=\"transition ease-out duration-100\"\r\n                      enterFrom=\"transform opacity-0 scale-95\"\r\n                      enterTo=\"transform opacity-100 scale-100\"\r\n                      leave=\"transition ease-in duration-75\"\r\n                      leaveFrom=\"transform opacity-100 scale-100\"\r\n                      leaveTo=\"transform opacity-0 scale-95\"\r\n                    >\r\n                      <Menu.Items\r\n                        static\r\n                        className=\"z-10 mx-3 origin-top-right absolute right-0 top-3 w-72 mt-1 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-200 focus:outline-none\"\r\n                      >\r\n                        <div className=\"py-1\">\r\n                          <Menu.Item>\r\n                            {({ active }) => (\r\n                              <button\r\n                                className={classNames(\r\n                                  active\r\n                                    ? \"bg-gray-100 text-gray-900\"\r\n                                    : \"text-gray-700\",\r\n                                  \"block px-4 py-2 text-sm w-full text-left\"\r\n                                )}\r\n                              >\r\n                                View - Does Nothing\r\n                              </button>\r\n                            )}\r\n                          </Menu.Item>\r\n                        </div>\r\n                        <div className=\"py-1\">\r\n                          <Menu.Item>\r\n                            {({ active }) => (\r\n                              <button\r\n                                className={classNames(\r\n                                  active\r\n                                    ? \"bg-gray-100 text-gray-900\"\r\n                                    : \"text-gray-700\",\r\n                                  \"block px-4 py-2 text-sm w-full text-left\"\r\n                                )}\r\n                              >\r\n                                Removed from pinned - Does Nothing\r\n                              </button>\r\n                            )}\r\n                          </Menu.Item>\r\n                          <Menu.Item>\r\n                            {({ active }) => (\r\n                              <button\r\n                                className={classNames(\r\n                                  active\r\n                                    ? \"bg-gray-100 text-gray-900\"\r\n                                    : \"text-gray-700\",\r\n                                  \"block px-4 py-2 text-sm w-full text-left\"\r\n                                )}\r\n                              >\r\n                                Share - Does Nothing\r\n                              </button>\r\n                            )}\r\n                          </Menu.Item>\r\n                        </div>\r\n                      </Menu.Items>\r\n                    </Transition>\r\n                  </>\r\n                )}\r\n              </Menu>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PinnedProjects;\r\n","import { Listbox, Transition } from \"@headlessui/react\";\r\nimport { Fragment } from \"react\";\r\nimport { SelectorIcon, CheckIcon } from \"@heroicons/react/outline\";\r\n\r\nfunction classNames(...classes: any[]) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction TaskListFilterSelect(\r\n  currentFilterValue: any | null,\r\n  updateFilterFunction: Function,\r\n  filterLabel: string,\r\n  optionArray: any[]\r\n) {\r\n  const handleBooleanValues = (filterValue: any) => {\r\n    if (filterValue === true) {\r\n      return \"True\";\r\n    } else if (filterValue === false) {\r\n      return \"False\";\r\n    } else if (filterValue === null) {\r\n      return \"N/A\";\r\n    } else {\r\n      return filterValue;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Listbox\r\n      value={currentFilterValue}\r\n      onChange={(e) => updateFilterFunction(e)}\r\n    >\r\n      {({ open }) => (\r\n        <>\r\n          <Listbox.Label className=\"block text-sm font-bold\">\r\n            {filterLabel}\r\n          </Listbox.Label>\r\n          <div className=\"mt-1 relative\">\r\n            <Listbox.Button className=\"bg-white relative w-full max-w-1/6 border border-gray-300 rounded-md shadow-sm pl-3 pr-10 md:py-2 sm:py-1 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\r\n              <span className=\"block truncate\">\r\n                {handleBooleanValues(currentFilterValue)}\r\n              </span>\r\n              <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\r\n                <SelectorIcon\r\n                  className=\"h-5 w-5 text-gray-400\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            </Listbox.Button>\r\n          </div>\r\n          <Transition\r\n            show={open}\r\n            as={Fragment}\r\n            leave=\"transition ease-in duration-100\"\r\n            leaveFrom=\"opacity-100\"\r\n            leaveTo=\"opacity-0\"\r\n          >\r\n            <Listbox.Options\r\n              static\r\n              className=\"absolute z-10 mt-1 w-1/4 bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\"\r\n            >\r\n              {optionArray.map((status) => (\r\n                <Listbox.Option\r\n                  key={status}\r\n                  className={({ active }) =>\r\n                    classNames(\r\n                      active ? \"text-white bg-indigo-600\" : \"text-gray-900\",\r\n                      \"cursor-default select-none relative py-2 pl-3 pr-9\"\r\n                    )\r\n                  }\r\n                  value={status}\r\n                >\r\n                  {({ selected, active }) => (\r\n                    <>\r\n                      <span\r\n                        className={classNames(\r\n                          selected ? \"font-semibold\" : \"font-normal\",\r\n                          \"block truncate\"\r\n                        )}\r\n                      >\r\n                        {handleBooleanValues(status)}\r\n                      </span>\r\n\r\n                      {selected ? (\r\n                        <span\r\n                          className={classNames(\r\n                            active ? \"text-white\" : \"text-indigo-600\",\r\n                            \"absolute inset-y-0 right-0 flex items-center pr-4\"\r\n                          )}\r\n                        >\r\n                          <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n                        </span>\r\n                      ) : null}\r\n                    </>\r\n                  )}\r\n                </Listbox.Option>\r\n              ))}\r\n            </Listbox.Options>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Listbox>\r\n  );\r\n}\r\n\r\nexport default TaskListFilterSelect;\r\n","import { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\nimport { addFilterPreset } from \"../TaskFilterPreset/TaskFilterPresetSlice\";\r\nimport TaskListFilterSelect from \"./TaskListFilterSelect\";\r\nimport {\r\n  getFilters,\r\n  setCompletionFilter,\r\n  setPriorityFilter,\r\n  setHasNoteFilter,\r\n  clearAllFilters,\r\n} from \"./TaskFilterSlice\";\r\n\r\nfunction TaskListFilters() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currentFilters = useSelector(getFilters);\r\n\r\n  const updateCompletionFilter = (status: TaskStatus) => {\r\n    dispatch(setCompletionFilter(status));\r\n  };\r\n\r\n  const updatePriorityFilter = (status: TaskPriority) => {\r\n    dispatch(setPriorityFilter(status));\r\n  };\r\n\r\n  const updateHasNoteFilter = (status: boolean) => {\r\n    dispatch(setHasNoteFilter(status));\r\n  };\r\n\r\n  const saveClearAllFilters = () => {\r\n    dispatch(clearAllFilters());\r\n  };\r\n\r\n  const saveNewTaskFilterPreset = () => {\r\n    dispatch(addFilterPreset(currentFilters));\r\n  };\r\n\r\n  const filterDivClasses = () => {\r\n    return \"px-2 py-3 my-2 mx-2 md:mx-0 bg-white shadow rounded-lg\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"border-t w-full mx-auto sm:px-1 lg:px-3 mt-8 bg-gray-100 grid md:grid-cols-4 md:gap-2 sm:grid-cols-1\">\r\n      <div className={filterDivClasses()}>\r\n        {TaskListFilterSelect(\r\n          currentFilters.completion,\r\n          updateCompletionFilter,\r\n          \"Task Status\",\r\n          [TaskStatus.Active, TaskStatus.Complete, TaskStatus.Dropped, null]\r\n        )}\r\n      </div>\r\n      <div className={filterDivClasses()}>\r\n        {TaskListFilterSelect(\r\n          currentFilters.priority,\r\n          updatePriorityFilter,\r\n          \"Task Priority\",\r\n          [\r\n            TaskPriority.None,\r\n            TaskPriority.Low,\r\n            TaskPriority.Medium,\r\n            TaskPriority.High,\r\n            TaskPriority.Immediate,\r\n            null,\r\n          ]\r\n        )}\r\n      </div>\r\n      <div className={filterDivClasses()}>\r\n        {TaskListFilterSelect(\r\n          currentFilters.hasNote,\r\n          updateHasNoteFilter,\r\n          \"Has Note?\",\r\n          [true, false, null]\r\n        )}\r\n      </div>\r\n      <div className={filterDivClasses()}>\r\n        <label className=\"block text-sm font-bold\">Filter Actions</label>\r\n        <div className=\"flex flex-row justify-center\">\r\n          <button\r\n            className=\"ml-3 mt-1 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-0 sm:ml-0\"\r\n            onClick={() => saveClearAllFilters()}\r\n          >\r\n            Clear All Filters\r\n          </button>\r\n          <button\r\n            className=\"mt-1 inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-1 ml-3\"\r\n            onClick={() => saveNewTaskFilterPreset()}\r\n          >\r\n            Save New Preset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskListFilters;\r\n","import { useState } from \"react\";\r\n\r\nimport TaskList from \"./Components/TaskList/TaskList\";\r\nimport SelectedTask from \"./Components/SelectedTask/SelectedTask\";\r\nimport Sidebar from \"./Components/Sidebars/Sidebar\";\r\nimport MobileSidebar from \"./Components/Sidebars/MobileSidebar\";\r\nimport SearchHeader from \"./Components/SearchHeader/SearchHeader\";\r\nimport TaskHeader from \"./Components/TasksHeader/TasksHeader\";\r\nimport PinnedProjects from \"./Components/PinnedProjects/PinnedProjects\";\r\nimport TaskListFilters from \"./Components/TaskListFilter/TaskListFilters\";\r\n\r\nexport default function Example() {\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n\r\n  return (\r\n    <div className=\"h-screen flex overflow-hidden bg-white\">\r\n      {/* Slideout sidebar for mobile */}\r\n      {MobileSidebar(sidebarOpen, setSidebarOpen)}\r\n      {/* Static sidebar for desktop */}\r\n      {Sidebar(sidebarOpen, setSidebarOpen)}\r\n      {/* Main column */}\r\n      <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n        {/* Search header */}\r\n        {SearchHeader(sidebarOpen, setSidebarOpen)}\r\n        <main className=\"flex-1 relative z-0 overflow-y-auto focus:outline-none\">\r\n          {/* Page title & actions */}\r\n          {TaskHeader()}\r\n          {/* Pinned projects */}\r\n          {PinnedProjects()}\r\n          {/* Task Filters */}\r\n          {TaskListFilters()}\r\n          {/* Project List */}\r\n          {TaskList()}\r\n        </main>\r\n      </div>\r\n      {SelectedTask()}\r\n    </div>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store, { persistor } from \"./store\";\r\n\r\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nlibrary.add(fab, fas, far);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}