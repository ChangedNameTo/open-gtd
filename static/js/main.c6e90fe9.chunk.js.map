{"version":3,"sources":["Components/Task/TaskInterface.ts","Components/TaskList/TaskListSlice.ts","Components/TaskListFilters/TaskFilterSlice.ts","store.ts","reportWebVitals.js","Components/Navbar.tsx","Components/Footer.tsx","hooks.ts","Components/AddNewTask/AddNewTask.tsx","Components/Task/Task.tsx","Components/ButtonGroup/ButtonGroup.tsx","Components/TaskListFilters/TaskListFilters.tsx","Components/TaskList/TaskList.tsx","Components/SelectedTask/PrioritySelect.tsx","Components/SelectedTask/SelectedTask.tsx","Components/Folders.tsx","Components/TaskUI.tsx","App.tsx","index.tsx"],"names":["TaskStatus","TaskPriority","enableMapSet","taskListSlice","createSlice","name","initialState","taskList","byId","allIds","selectedTask","reducers","addTask","state","action","payload","newTaskId","String","length","task","note","status","Active","priority","None","dueDate","deferDate","created","Date","now","modified","completed","push","selectTask","updateTaskTaskName","taskId","newName","updateTaskTaskStatus","newStatus","Complete","updateTaskTaskNote","newNote","updateTaskTaskPriority","newPriority","updateTaskTaskDeferDate","newDate","updateTaskTaskDueDate","deleteTask","actions","getTasks","tasks","getSelectedTaskId","getSelectedTask","taskFilterSlice","completion","hasNote","setCompletionFilter","setPriorityFilter","setHasNoteFilter","clearAllFilters","getFilters","filters","persistConfig","key","storage","blacklist","taskPersistConfig","filtersPersistConfig","combineReducers","persistReducer","taskReducer","taskFilterReducer","persistedReducer","store","configureStore","reducer","middleware","thunk","persistor","persistStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","navbar","className","icon","size","footer","socialLink","text","link","onClick","window","open","followLink","useAppDispatch","useDispatch","useSelector","AddNewTask","isInitialMount","useRef","useState","visible","setVisible","hidden","setHidden","taskText","setTaskText","dispatch","useEffect","current","setTimeout","createNewTask","trim","id","type","placeholder","value","onChange","e","target","onKeyDown","shiftKey","preventDefault","onEnterPress","TaskRow","props","date","taskNoteHidden","setTaskNoteHidden","setSelectTask","currentTarget","updateTaskStatus","updateTaskNoteVisible","contains","tableRowStyles","Dropped","toLocaleDateString","classes","noteIcon","colSpan","ButtonGroup","buttonGroupSelectedOption","onClickArg","options","idPrefix","buttonIsActive","option","convertOptionText","buttonText","leftButton","slice","map","index","rightButton","TaskListFilters","currentFilters","Low","Medium","High","Immediate","TaskRowDisplay","taskListFilters","getTaskById","hasNoteFilter","priorityFilter","completionFilter","filter","Task","buildTaskList","priorityOptions","label","PrioritySelect","selectedTaskId","currentPriority","updateTaskPriority","SelectedTask","styleDates","toLocaleString","taskSubsectionHeader","subsectionHeader","datepicker","dateChangeFunction","placeholderText","chosenDate","selected","isClearable","dateFormat","todayButton","openToDate","updateTaskName","getTime","updateTaskNote","Folders","taskUI","App","library","add","fab","fas","far","ReactDOM","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c6e90fe9.chunk.js","sourcesContent":["export enum TaskStatus {\r\n  Active = \"Active\",\r\n  Complete = \"Complete\",\r\n  Dropped = \"Dropped\",\r\n}\r\n\r\nexport enum TaskPriority {\r\n  None = \"None\",\r\n  Low = \"Low ✅\",\r\n  Medium = \"Medium ⚠️\",\r\n  High = \"High 🛑\",\r\n  Immediate = \"Immediate ⛔️\",\r\n}\r\n\r\nexport default interface Task {\r\n  // The actual task text\r\n  task: string;\r\n\r\n  // Anything placed into the note text box\r\n  note: string;\r\n\r\n  // One of the three possible statuses that a task can have\r\n  status: TaskStatus;\r\n\r\n  // One of the five possible priorities, default None\r\n  priority: TaskPriority;\r\n\r\n  dueDate: number | null;\r\n  deferDate: number | null;\r\n\r\n  // Timestamps\r\n  readonly created: number;\r\n  modified: number;\r\n  completed: number;\r\n}\r\n","import { enableMapSet } from \"immer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store\";\r\n\r\nimport TaskList from \"./TaskListInterface\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\n\r\nenableMapSet();\r\n\r\nconst initialState: TaskList = {\r\n  taskList: { byId: {}, allIds: [] },\r\n  selectedTask: \"-1\",\r\n};\r\n\r\nexport const taskListSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState,\r\n  reducers: {\r\n    addTask: (state: TaskList, action: PayloadAction<string>) => {\r\n      // Do not add task if the field is empty\r\n      if (action.payload === \"\") {\r\n        return;\r\n      }\r\n\r\n      const newTaskId = String(state.taskList.allIds.length);\r\n\r\n      state.taskList.byId[newTaskId] = {\r\n        task: action.payload,\r\n\r\n        note: \"\",\r\n\r\n        status: TaskStatus.Active,\r\n\r\n        priority: TaskPriority.None,\r\n\r\n        dueDate:-1,\r\n        deferDate:-1,\r\n\r\n        created: Date.now(),\r\n        modified: Date.now(),\r\n        completed: -1,\r\n      };\r\n      state.taskList.allIds.push(newTaskId);\r\n    },\r\n    selectTask: (state: TaskList, action: PayloadAction<string>) => {\r\n      state.selectedTask = action.payload;\r\n    },\r\n    updateTaskTaskName: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.task = action.payload.newName;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskStatus: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.status = action.payload.newStatus;\r\n\r\n      if (task.status === TaskStatus.Complete) {\r\n        task.completed = Date.now();\r\n      } else {\r\n        task.completed = -1;\r\n      }\r\n\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskNote: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.note = action.payload.newNote;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskPriority: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.priority = action.payload.newPriority;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskDeferDate: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.deferDate = action.payload.newDate;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskDueDate: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.dueDate = action.payload.newDate;\r\n      task.modified = Date.now();\r\n    },\r\n    deleteTask: (state: TaskList, action: PayloadAction<any>) => {\r\n      delete state.taskList.byId[action.payload.taskId];\r\n      delete state.taskList.allIds[action.payload.taskId];\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  selectTask,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n  updateTaskTaskPriority,\r\n  updateTaskTaskDeferDate,\r\n  updateTaskTaskDueDate\r\n} = taskListSlice.actions;\r\n\r\nexport const getTasks = (state: RootState) => state.tasks.taskList;\r\nexport const getSelectedTaskId = (state: RootState) => state.tasks.selectedTask;\r\nexport const getSelectedTask = (state: RootState) =>\r\n  state.tasks.taskList.byId[state.tasks.selectedTask];\r\n\r\nexport default taskListSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../store\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\nimport TaskFilters from \"../TaskListFilters/TaskFiltersInterface\";\r\n\r\nconst initialState: TaskFilters = {\r\n  completion: null,\r\n  priority: null,\r\n  hasNote: null,\r\n};\r\n\r\nexport const taskFilterSlice = createSlice({\r\n  name: \"filters\",\r\n  initialState,\r\n  reducers: {\r\n    setCompletionFilter: (\r\n      state: TaskFilters,\r\n      action: PayloadAction<TaskStatus>\r\n    ) => {\r\n      state.completion = action.payload;\r\n    },\r\n    setPriorityFilter: (\r\n      state: TaskFilters,\r\n      action: PayloadAction<TaskPriority>\r\n    ) => {\r\n      state.priority = action.payload;\r\n    },\r\n    setHasNoteFilter: (state: TaskFilters, action: PayloadAction<boolean>) => {\r\n      state.hasNote = action.payload;\r\n    },\r\n    clearAllFilters: (state: TaskFilters) => {\r\n      state.completion = null;\r\n      state.priority = null;\r\n      state.hasNote = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCompletionFilter,\r\n  setPriorityFilter,\r\n  setHasNoteFilter,\r\n  clearAllFilters,\r\n} = taskFilterSlice.actions;\r\n\r\nexport const getFilters = (state: RootState) => state.filters;\r\n\r\nexport default taskFilterSlice.reducer;\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n// Change this to electron storage when I switch to electron\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport taskReducer from \"./Components/TaskList/TaskListSlice\";\r\nimport taskFilterReducer from \"./Components/TaskListFilters/TaskFilterSlice\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"tasks\"],\r\n};\r\n\r\nconst taskPersistConfig = {\r\n  key: \"tasks\",\r\n  storage,\r\n  blacklist: [\"selectedTask\"],\r\n};\r\n\r\nconst filtersPersistConfig = {\r\n  key: \"filters\",\r\n  storage,\r\n};\r\n\r\nconst reducers = combineReducers({\r\n  tasks: persistReducer(taskPersistConfig, taskReducer),\r\n  filters: persistReducer(filtersPersistConfig, taskFilterReducer),\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [thunk],\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n/**\r\n * Returns the navbar component\r\n * @return {FunctionComponent}\r\n */\r\nfunction navbar() {\r\n  return (\r\n    <nav className=\"bg-gray-800\">\r\n      <div className=\"mx-auto px-4 sm:px-6 lg:px-8 pb-0.5\">\r\n        <div className=\"flex items-center justify-between h-12\">\r\n          <div className=\"flex items-center\">\r\n            <div className=\"flex-shrink-0 py-1\">\r\n              <FontAwesomeIcon\r\n                className=\"text-white\"\r\n                icon={[\"far\", \"check-circle\"]}\r\n                size=\"2x\"\r\n              />\r\n            </div>\r\n            <div className=\"md:block\">\r\n              <div className=\"ml-10 flex items-baseline space-x-4\">\r\n                <button className=\"bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-bold\">\r\n                  Inbox\r\n                </button>\r\n\r\n                <button className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium hover:font-bold\">\r\n                  Tasks\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default navbar;\r\n","import { IconName } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * Returns the footer component\r\n * @return {FunctionComponent}\r\n */\r\nfunction footer() {\r\n  const followLink = (link: string) => {\r\n    window.open(link);\r\n  };\r\n\r\n  const socialLink = (text: IconName, link: string) => {\r\n    return (\r\n      <div className=\"grid justify-items-center px-4\">\r\n        <button\r\n          className=\"text-white rounded border-2 border-white hover:bg-white hover:text-gray-800 px-2 py-1 focus:outline-none\"\r\n          onClick={() => followLink(link)}\r\n        >\r\n          <FontAwesomeIcon size=\"3x\" icon={[\"fab\", text]} />\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full bg-gray-800 divide-x flex flex-row justify-center py-2\">\r\n      {socialLink(\"github-square\", \"https://github.com/ChangedNameTo/open-gtd\")}\r\n      {socialLink(\"linkedin\", \"\")}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default footer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React, { ChangeEvent, useEffect, useState, useRef } from \"react\";\r\n\r\nimport { addTask } from \"../TaskList/TaskListSlice\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n/**\r\n * Returns the AddNewTask Button, and the input it controls\r\n * @return {FunctionComponent}\r\n */\r\nfunction AddNewTask() {\r\n  const isInitialMount = useRef(true);\r\n  const [visible, setVisible] = useState(false);\r\n  const [hidden, setHidden] = useState(\"hidden\");\r\n  const [taskText, setTaskText] = useState(\"\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const toggleVisible = () => setVisible(!visible);\r\n\r\n  const addTaskDivClasses = () => {\r\n    return visible ? \"animate-fade-in-down\" : \"animate-fade-out-up\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      if (!visible) {\r\n        setTimeout(() => {\r\n          setHidden(\"hidden\");\r\n        }, 250);\r\n      } else {\r\n        setTimeout(() => {\r\n          setHidden(\"\");\r\n        }, 250);\r\n      }\r\n    }\r\n  }, [visible]);\r\n\r\n  const isHidden = () => {\r\n    return hidden ? \"hidden\" : \"\";\r\n  };\r\n\r\n  const createNewTask = () => {\r\n    dispatch(addTask(taskText.trim()));\r\n    setTaskText(\"\");\r\n  };\r\n\r\n  const onEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\" && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      createNewTask();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <button\r\n        className=\"w-full items-center px-4 bg-green-500 rounded-md shadow-m text-m font-medium border-green-600 border-2 hover:bg-green-600 text-white bold active:ring-green-500 focus:outline-none\"\r\n        id=\"addTaskButton\"\r\n        onClick={() => toggleVisible()}\r\n      >\r\n        Add New Task\r\n      </button>\r\n      <div\r\n        className={`${addTaskDivClasses()} ${isHidden()} flex flex-row focus-within:ring-green-500 focus-within:ring-2 rounded`}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          className=\"rounded-md rounded-r-none w-full border-green-100 focus:ring-0 focus:border-transparent\"\r\n          id=\"addTaskInput\"\r\n          placeholder=\"Enter new task\"\r\n          value={taskText}\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n            setTaskText(e.target.value)\r\n          }\r\n          onKeyDown={(e) => onEnterPress(e)}\r\n        />\r\n        <span\r\n          className=\"flex items-center bg-green-600 rounded rounded-l-none border-0 px-3 hover:bg-green-500 cursor-pointer duration-200 transition ease-in-out\"\r\n          onClick={() => createNewTask()}\r\n        >\r\n          <button className=\"focus:outline-none\" id=\"submitNewTaskButton\">\r\n            <FontAwesomeIcon\r\n              className=\"text-white py-auto\"\r\n              icon={[\"fas\", \"check-circle\"]}\r\n              size=\"2x\"\r\n            />\r\n          </button>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddNewTask;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport { RootState } from \"../../store\";\r\nimport { selectTask, updateTaskTaskStatus } from \"../TaskList/TaskListSlice\";\r\nimport { TaskStatus } from \"./TaskInterface\";\r\n\r\n/**\r\n * Creates a task object for display.\r\n * @param props {Object} Contains the Task object that users will click on. This is the basic unit of all of open-gtd.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskRow(props: { taskId: string }) {\r\n  const [taskNoteHidden, setTaskNoteHidden] = useState(true);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const task = useSelector(\r\n    (state: RootState) => state.tasks.taskList.byId[props.taskId]\r\n  );\r\n\r\n  const setSelectTask = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (e.target !== e.currentTarget) {\r\n      return;\r\n    }\r\n    dispatch(selectTask(props.taskId));\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(updateTaskTaskStatus({ newStatus: status, taskId: props.taskId }));\r\n  };\r\n\r\n  const taskText = () => (task.task ? task.task : \"Empty task text\");\r\n\r\n  const textColor = () => (task.task ? \"\" : \"text-gray-300\");\r\n\r\n  const taskCheckboxIcon = () => {\r\n    if (task.status === TaskStatus.Active) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className=\"text-gray-300 fa-lg mt-1\"\r\n          icon={[\"far\", \"circle\"]}\r\n          onClick={() => updateTaskStatus(TaskStatus.Complete)}\r\n        />\r\n      );\r\n    } else if (task.status === TaskStatus.Complete) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className=\"text-gray-300 fa-lg mt-1\"\r\n          icon={[\"fas\", \"check-circle\"]}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    } else if (task.status === TaskStatus.Dropped) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className=\"text-gray-300 fa-lg mt-1\"\r\n          icon={[\"fas\", \"minus-circle\"]}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const noteIcon = () => {\r\n    const classes = \"text-gray-300 fa-lg mt-1 float-right\";\r\n\r\n    if (task.note) {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className={classes}\r\n          icon={[\"fas\", \"sticky-note\"]}\r\n          onClick={(e) => updateTaskNoteVisible(e)}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <FontAwesomeIcon\r\n          className={classes}\r\n          icon={[\"far\", \"sticky-note\"]}\r\n          onClick={(e) => updateTaskNoteVisible(e)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const isTaskNoteHidden = () => {\r\n    return taskNoteHidden ? \"hidden\" : \"\";\r\n  };\r\n\r\n  const updateTaskNoteVisible = (e: any) => {\r\n    const target = e.target;\r\n    const currentTarget = e.currentTarget;\r\n\r\n    if (\r\n      (target !== currentTarget && !currentTarget.contains(target)) ||\r\n      !task.note\r\n    ) {\r\n      return;\r\n    }\r\n    setTaskNoteHidden(!taskNoteHidden);\r\n  };\r\n\r\n  const priorityIcon = () => {\r\n    return (\r\n      <div\r\n        className=\"inline rounded-xl border border-gray-500 px-2 py-0.5 text-gray-500 float-center\"\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        {task.priority}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const isBottomBorderHidden = () => {\r\n    return taskNoteHidden ? \"border-b\" : \"\";\r\n  };\r\n\r\n  const tableRowStyles =\r\n    \"min-w-full  hover:bg-gray-100 focus:bg-gray-200 px-1 font-mono focus:ring-0 focus:border-transparent focus:outline-none cursor-pointer\";\r\n\r\n  const formatTaskDates = (date: number | null) => {\r\n    if (date) {\r\n      return new Date(date).toLocaleDateString(\"en-us\");\r\n    } else {\r\n      return \"-\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <tr\r\n        id={`taskId${props.taskId}`}\r\n        className={`${tableRowStyles} ${isBottomBorderHidden()}`}\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        <td\r\n          className=\"px-1 whitespace-nowrap\"\r\n          onClick={(e) => setSelectTask(e)}\r\n        >\r\n          {taskCheckboxIcon()}\r\n        </td>\r\n        <td\r\n          className={`${textColor()} break-words select-none`}\r\n          onClick={(e) => setSelectTask(e)}\r\n        >\r\n          {taskText()}\r\n        </td>\r\n        <td\r\n          className=\"px-1 whitespace-nowrap pt-1\"\r\n          onClick={(e) => setSelectTask(e)}\r\n        >\r\n          {priorityIcon()}\r\n        </td>\r\n        <td\r\n          className=\"px-1 whitespace-nowrap pt-1 text-gray-400\"\r\n          onClick={(e) => setSelectTask(e)}\r\n        >\r\n          {formatTaskDates(task.dueDate)}\r\n        </td>\r\n        <td className={`px-1`} onClick={(e) => setSelectTask(e)}>\r\n          {noteIcon()}\r\n        </td>\r\n      </tr>\r\n      <tr\r\n        className={`${isTaskNoteHidden()} min-w-full text-gray-400 rounded pt-1 border-b`}\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        <td\r\n          className={`${tableRowStyles}`}\r\n          colSpan={5}\r\n          onClick={(e) => setSelectTask(e)}\r\n        >\r\n          {task.note}\r\n        </td>\r\n      </tr>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default TaskRow;\r\n","function ButtonGroup(\r\n  buttonGroupSelectedOption: any,\r\n  onClickArg: Function,\r\n  options: any[],\r\n  idPrefix: string\r\n) {\r\n  const buttonIsActive = (option: any) => {\r\n    if (buttonGroupSelectedOption === option) {\r\n      return \"font-semibold bg-gray-700 text-gray-100\";\r\n    } else {\r\n      return \"bg-gray-100 text-gray-700 hover:text-gray-700 hover:bg-gray-300\";\r\n    }\r\n  };\r\n\r\n  const convertOptionText = (option: any) => {\r\n    if (option === null) {\r\n      return \"Select All\";\r\n    } else if (option === true) {\r\n      return \"True\";\r\n    } else if (option === false) {\r\n      return \"False\";\r\n    } else {\r\n      return option;\r\n    }\r\n  };\r\n\r\n  const leftButton = () => {\r\n    const buttonText = options[0];\r\n\r\n    return (\r\n      <button\r\n        className={`${buttonIsActive(\r\n          buttonText\r\n        )} border border-gray-600 flex-auto rounded-l duration-200 ease-in-out transition focus:outline-none hover:ring-2 hover:ring-gray-700`}\r\n        id={`${idPrefix}${buttonText}Button`}\r\n        onClick={() => onClickArg(buttonText)}\r\n        key={buttonText}\r\n      >\r\n        {convertOptionText(buttonText)}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const middleButtons = () => {\r\n    return options.slice(1, options.length - 1).map((buttonText, index) => {\r\n      return (\r\n        <button\r\n          className={`${buttonIsActive(\r\n            buttonText\r\n          )} border border-gray-600 flex-auto duration-200 ease-in-out transition focus:outline-none hover:ring-2 hover:ring-gray-700`}\r\n          id={`${idPrefix}${buttonText}Button`}\r\n          onClick={() => onClickArg(buttonText)}\r\n          key={buttonText}\r\n        >\r\n          {convertOptionText(buttonText)}\r\n        </button>\r\n      );\r\n    });\r\n  };\r\n\r\n  const rightButton = () => {\r\n    const buttonText = options[options.length - 1];\r\n    return (\r\n      <button\r\n        className={`${buttonIsActive(\r\n          buttonText\r\n        )} border border-gray-600 flex-auto rounded-r duration-200 ease-in-out transition focus:outline-none hover:ring-2 hover:ring-gray-600`}\r\n        id={`${idPrefix}${buttonText}Button`}\r\n        onClick={() => onClickArg(buttonText)}\r\n        key={buttonText}\r\n      >\r\n        {convertOptionText(buttonText)}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-row\">\r\n      {leftButton()}\r\n      {middleButtons()}\r\n      {rightButton()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonGroup;\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\nimport ButtonGroup from \"../ButtonGroup/ButtonGroup\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\nimport {\r\n  getFilters,\r\n  setCompletionFilter,\r\n  setPriorityFilter,\r\n  setHasNoteFilter,\r\n  clearAllFilters,\r\n} from \"./TaskFilterSlice\";\r\n\r\nfunction TaskListFilters() {\r\n  const isInitialMount = useRef(true);\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const [hidden, setHidden] = useState(\"hidden\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currentFilters = useSelector(getFilters);\r\n\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      isInitialMount.current = false;\r\n    } else {\r\n      if (!visible) {\r\n        setTimeout(() => {\r\n          setHidden(\"hidden\");\r\n        }, 250);\r\n      } else {\r\n        setTimeout(() => {\r\n          setHidden(\"\");\r\n        }, 250);\r\n      }\r\n    }\r\n  }, [visible]);\r\n\r\n  const updateCompletionFilter = (status: TaskStatus) => {\r\n    dispatch(setCompletionFilter(status));\r\n  };\r\n\r\n  const updatePriorityFilter = (status: TaskPriority) => {\r\n    dispatch(setPriorityFilter(status));\r\n  };\r\n\r\n  const updateHasNoteFilter = (status: boolean) => {\r\n    dispatch(setHasNoteFilter(status));\r\n  };\r\n\r\n  const updateClearAllFilters = () => {\r\n    dispatch(clearAllFilters());\r\n  };\r\n\r\n  const buttonIsActive = () => {\r\n    if (visible) {\r\n      return \"text-bold bg-gray-700 text-gray-100\";\r\n    } else {\r\n      return \"bg-gray-100 text-gray-700 hover:text-gray-700 hover:bg-gray-300\";\r\n    }\r\n  };\r\n\r\n  const toggleVisible = () => setVisible(!visible);\r\n\r\n  const isHidden = () => {\r\n    return hidden ? \"hidden\" : \"\";\r\n  };\r\n\r\n  const addFiltersDivClasses = () => {\r\n    return visible ? \"animate-fade-in-down\" : \"animate-fade-out-up\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"py-2\">\r\n      <button\r\n        className={`${buttonIsActive()} w-full items-center px-4 rounded-md shadow-m font-medium border-2 border-gray-600`}\r\n        id=\"taskFilterButton\"\r\n        onClick={() => toggleVisible()}\r\n      >\r\n        Filter Tasks\r\n      </button>\r\n      <div className={`${addFiltersDivClasses()} ${isHidden()} flex flex-row`}>\r\n        <div className=\"w-full shadow-lg rounded my-1 border border-gray-600 p-1\">\r\n          <div className=\"font-semibold text-center\">Filters Visible</div>\r\n          <div className=\"space-y-2\">\r\n            <div className=\"block\">\r\n              <div className=\"font-semibold\">Priority Filter</div>\r\n              {ButtonGroup(\r\n                currentFilters.priority,\r\n                updatePriorityFilter,\r\n                [\r\n                  null,\r\n                  TaskPriority.None,\r\n                  TaskPriority.Low,\r\n                  TaskPriority.Medium,\r\n                  TaskPriority.High,\r\n                  TaskPriority.Immediate,\r\n                ],\r\n                \"completionFilter\"\r\n              )}\r\n            </div>\r\n            <div className=\"block\">\r\n              <div className=\"font-semibold\">Status Filter</div>\r\n              <div>\r\n                {ButtonGroup(\r\n                  currentFilters.completion,\r\n                  updateCompletionFilter,\r\n                  [\r\n                    null,\r\n                    TaskStatus.Active,\r\n                    TaskStatus.Complete,\r\n                    TaskStatus.Dropped,\r\n                  ],\r\n                  \"completionFilter\"\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"block\">\r\n              <div className=\"font-semibold\">Tag Filter</div>\r\n              Not Implemented\r\n            </div>\r\n            <div className=\"block\">\r\n              <div className=\"font-semibold\">Note Filter</div>\r\n              <div>\r\n                {ButtonGroup(\r\n                  currentFilters.hasNote,\r\n                  updateHasNoteFilter,\r\n                  [null, true, false],\r\n                  \"completionFilter\"\r\n                )}\r\n              </div>\r\n            </div>\r\n            <div className=\"block\">\r\n              <button\r\n                className=\"font-bold bg-red-600 w-full rounded text-white\"\r\n                onClick={() => updateClearAllFilters()}\r\n              >\r\n                Clear All Filters\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskListFilters;\r\n","import { useSelector } from \"react-redux\";\r\n\r\nimport AddNewTask from \"../AddNewTask/AddNewTask\";\r\nimport { getTasks } from \"./TaskListSlice\";\r\nimport TaskRow from \"../Task/Task\";\r\nimport TaskListFilters from \"../TaskListFilters/TaskListFilters\";\r\nimport { getFilters } from \"../TaskListFilters/TaskFilterSlice\";\r\n\r\n/**\r\n * Creates the Task Rows for the main task UI.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskRowDisplay() {\r\n  const taskList = useSelector(getTasks);\r\n  const taskListFilters = useSelector(getFilters);\r\n\r\n  const getTaskById = (taskId: string) => taskList.byId[taskId];\r\n\r\n  const hasNoteFilter = (taskId: string) => {\r\n    if (taskListFilters.hasNote) {\r\n      return getTaskById(taskId).note !== \"\";\r\n    } else if (taskListFilters.hasNote === false) {\r\n      return getTaskById(taskId).note === \"\";\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const priorityFilter = (taskId: string) => {\r\n    if (taskListFilters.priority) {\r\n      return taskListFilters.priority === getTaskById(taskId).priority;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const completionFilter = (taskId: string) => {\r\n    if (taskListFilters.completion) {\r\n      return taskListFilters.completion === getTaskById(taskId).status;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const buildTaskList = () => {\r\n    if (taskList.allIds) {\r\n      return taskList.allIds\r\n        .filter(completionFilter)\r\n        .filter(priorityFilter)\r\n        .filter(hasNoteFilter)\r\n        .map((taskId, index) => {\r\n          return <TaskRow taskId={taskId} key={index} />;\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col px-2 flex-1\">\r\n      <div className=\"header bg-white shadow\">\r\n        <div className=\"max-w-4xl mx-auto py-2 px-1 sm:px-6 lg:px-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 text-center\">\r\n            Tasks\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <table\r\n        className=\"table-auto divide-y divide-gray-300 flex-initial\"\r\n        id=\"taskList\"\r\n      >\r\n        <tbody>{buildTaskList()}</tbody>\r\n      </table>\r\n      <br />\r\n      {AddNewTask()}\r\n      {TaskListFilters()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskRowDisplay;\r\n","import { ChangeEvent } from \"react\";\r\nimport { TaskPriority } from \"../Task/TaskInterface\";\r\nimport { updateTaskTaskPriority } from \"../TaskList/TaskListSlice\";\r\n\r\nconst priorityOptions = [\r\n  { value: TaskPriority.None, label: TaskPriority.None },\r\n  { value: TaskPriority.Low, label: TaskPriority.Low },\r\n  { value: TaskPriority.Medium, label: TaskPriority.Medium },\r\n  { value: TaskPriority.High, label: TaskPriority.High },\r\n  { value: TaskPriority.Immediate, label: TaskPriority.Immediate },\r\n];\r\n\r\nfunction PrioritySelect(\r\n  dispatch: any,\r\n  selectedTaskId: string,\r\n  currentPriority: TaskPriority\r\n) {\r\n  const updateTaskPriority = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    dispatch(\r\n      updateTaskTaskPriority({\r\n        newPriority: e.target.value,\r\n        taskId: selectedTaskId,\r\n      })\r\n    );\r\n  };\r\n\r\n  const buildOptionsList = () => {\r\n    return priorityOptions.map((value) => {\r\n      return (\r\n        <option\r\n          className=\"w-full rounded\"\r\n          value={value.value}\r\n          key={value.value}\r\n        >\r\n          {value.label}\r\n        </option>\r\n      );\r\n    });\r\n  };\r\n\r\n  // TODO: Change this to use divs and a's instead of being a select\r\n  return (\r\n    <select\r\n      className=\"mt-1 w-full border border-gray-600 rounded-md focus:outline-none hover:ring-2 hover:ring-gray-600\"\r\n      onChange={(e) => updateTaskPriority(e)}\r\n      id=\"selectedTaskPrioritySelect\"\r\n      value={currentPriority}\r\n    >\r\n      {buildOptionsList()}\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default PrioritySelect;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ChangeEvent } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../hooks\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport { TaskStatus } from \"../Task/TaskInterface\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\n\r\nimport {\r\n  getSelectedTask,\r\n  getSelectedTaskId,\r\n  selectTask,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n  updateTaskTaskDeferDate,\r\n  updateTaskTaskDueDate,\r\n} from \"../TaskList/TaskListSlice\";\r\nimport PrioritySelect from \"./PrioritySelect\";\r\nimport ButtonGroup from \"../ButtonGroup/ButtonGroup\";\r\n/**\r\n * After clicking on a task in\r\n * @returns {FunctionComponent}\r\n */\r\nfunction SelectedTask() {\r\n  const selectedTaskId = useSelector(getSelectedTaskId);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const updateTaskName = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(\r\n      updateTaskTaskName({ newName: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const closeSelectedTask = () => {\r\n    dispatch(selectTask(\"-1\"));\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(\r\n      updateTaskTaskStatus({ newStatus: status, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskNote = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(\r\n      updateTaskTaskNote({ newNote: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskDeferDate = (e: Date) => {\r\n    const newDate = e ? e.getTime() : null;\r\n    dispatch(\r\n      updateTaskTaskDeferDate({ newDate: newDate, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskDueDate = (e: Date) => {\r\n    const newDate = e ? e.getTime() : null;\r\n    dispatch(\r\n      updateTaskTaskDueDate({ newDate: newDate, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const selectedTask = useSelector(getSelectedTask);\r\n\r\n  // Early returns here to avoid having the selected task stay open at all times\r\n  if (selectedTaskId === \"-1\") {\r\n    return;\r\n  }\r\n\r\n  const closeSelectedTaskButton = () => {\r\n    return (\r\n      <div className=\"float-left mt-1\">\r\n        <span\r\n          className=\"fa-layers fa-fw fa-2x group my-1 cursor-pointer\"\r\n          id=\"closeSelectedTask\"\r\n          onClick={() => closeSelectedTask()}\r\n        >\r\n          <FontAwesomeIcon\r\n            className=\"text-gray-300 group-hover:text-gray-400 group-hover:border-gray-600 group-hover:ring-2 group-hover:ring-gray-500 rounded-full\"\r\n            icon={[\"fas\", \"circle\"]}\r\n          />\r\n          <FontAwesomeIcon\r\n            className=\"text-gray-500 align-center group-hover:text-gray-600 pl-0.5\"\r\n            icon={[\"fas\", \"angle-right\"]}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const styleDates = (date: number) => {\r\n    if (date > 0) {\r\n      return new Date(date).toLocaleString(\"en-us\");\r\n    } else {\r\n      return \"N/A\";\r\n    }\r\n  };\r\n\r\n  const taskSubsectionHeader = (subsectionHeader: string) => {\r\n    return <div className=\"pt-1 font-bold text-lg\">{subsectionHeader}</div>;\r\n  };\r\n\r\n  const datepicker = (\r\n    date: number | null,\r\n    dateChangeFunction: Function,\r\n    placeholderText: string\r\n  ) => {\r\n    const chosenDate = date ? new Date(date) : null;\r\n    return (\r\n      <DatePicker\r\n        selected={chosenDate}\r\n        onChange={(date) => dateChangeFunction(date)}\r\n        isClearable\r\n        placeholderText={placeholderText}\r\n        dateFormat=\"MM/dd/yyyy\"\r\n        className=\"border rounded w-full\"\r\n        todayButton=\"Today\"\r\n        openToDate={new Date(Date.now())}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-shrink-0 flex-col px-2 bg-gray-200 rounded-l-xl shadow-xl py-1 min-h-full transition ease-in border-gray-300 w-1/4 z-10\">\r\n      <div id=\"selectedTaskPane\" className=\"divide-y divide-gray-700\">\r\n        {/* Task Name */}\r\n        <div className=\"inline\">\r\n          {closeSelectedTaskButton()}\r\n          <TextareaAutosize\r\n            className=\"w-full border border-gray-600 rounded-md my-1 px-1 hover:ring-2 hover:ring-gray-700 focus:outline-none h-auto font-medium\"\r\n            id=\"selectedTaskName\"\r\n            value={selectedTask.task}\r\n            placeholder=\"Empty task text\"\r\n            onChange={(e) => updateTaskName(e)}\r\n          />\r\n        </div>\r\n        {/* Button Group */}\r\n        <div className=\"w-full pb-2\">\r\n          {taskSubsectionHeader(\"Task Status\")}\r\n          {ButtonGroup(\r\n            selectedTask.status,\r\n            updateTaskStatus,\r\n            [TaskStatus.Active, TaskStatus.Complete, TaskStatus.Dropped],\r\n            \"selectedTask\"\r\n          )}\r\n        </div>\r\n        {/* Tags */}\r\n        <div className=\"w-full pb-2\">\r\n          {taskSubsectionHeader(\"Tags\")}\r\n          Not Implemented\r\n        </div>\r\n        {/* Priority */}\r\n        <div className=\"w-full pb-2\">\r\n          {taskSubsectionHeader(\"Priority\")}\r\n          {PrioritySelect(dispatch, selectedTaskId, selectedTask.priority)}\r\n        </div>\r\n        {/* Defer/Due Dates */}\r\n        <div className=\"w-full\">\r\n          {taskSubsectionHeader(\"Defer / Due Dates\")}\r\n          <div className=\"w-full\">\r\n            {datepicker(\r\n              selectedTask.deferDate,\r\n              updateTaskDeferDate,\r\n              \"Defer Date\"\r\n            )}\r\n          </div>\r\n          <div className=\"w-full\">\r\n            {datepicker(selectedTask.dueDate, updateTaskDueDate, \"Due Date\")}\r\n          </div>\r\n        </div>\r\n        {/* Note */}\r\n        <div className=\"w-full\">\r\n          {taskSubsectionHeader(\"Task Note\")}\r\n          <TextareaAutosize\r\n            className=\"w-full border border-gray-600 rounded-md my-1 resize-y px-1 hover:ring-2 hover:ring-gray-600 focus:outline-none\"\r\n            placeholder=\"Note\"\r\n            id=\"selectedTaskNote\"\r\n            value={selectedTask.note}\r\n            onChange={(e) => updateTaskNote(e)}\r\n          />\r\n        </div>\r\n        {/* Dates */}\r\n        <div className=\"w-full py-2\">\r\n          {taskSubsectionHeader(\"Task Dates\")}\r\n          <div>\r\n            <div className=\"inline font-bold\">Created: </div>\r\n            <div id=\"selectedTaskCreated\" className=\"inline\">\r\n              {styleDates(selectedTask.created)}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <div className=\"inline font-bold\">Modified: </div>\r\n            <div id=\"selectedTaskModified\" className=\"inline\">\r\n              {styleDates(selectedTask.modified)}\r\n            </div>\r\n          </div>\r\n          <div>\r\n            <div className=\"inline font-bold\">Completed: </div>\r\n            <div id=\"selectedTaskCompleted\" className=\"inline\">\r\n              {styleDates(selectedTask.completed)}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectedTask;\r\n","function Folders() {\r\n  return (\r\n    <div className=\"flex flex-col flex-shrink-0 px-2 w-1/5\">\r\n      <div className=\"header bg-white shadow\">\r\n        <div className=\"mx-auto py-2 px-1 sm:px-6 lg:px-8\">\r\n          <h1 className=\"text-3xl font-bold text-gray-900 text-center\">\r\n            Folders\r\n          </h1>\r\n        </div>\r\n      </div>\r\n      <div>Not Implemented</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Folders;\r\n","import TaskRowDisplay from \"./TaskList/TaskList\";\r\nimport SelectedTask from \"./SelectedTask/SelectedTask\";\r\nimport Folders from \"./Folders\";\r\n\r\n/**\r\n * This is the main task UI window pane. It contains the task list, folders, and task view.\r\n * @return {FunctionComponent}\r\n */\r\nfunction taskUI() {\r\n  return (\r\n    <div className=\"inline-flex flex-grow space-x-2 py-2 h-full w-full\">\r\n      {Folders()}\r\n      {TaskRowDisplay()}\r\n      {SelectedTask()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default taskUI;\r\n","import navbar from \"./Components/Navbar\";\nimport footer from \"./Components/Footer\";\nimport taskUI from \"./Components/TaskUI\";\n\n/**\n * Returns the base application. This sets up the main UI frames.\n * @return {Application}\n */\nfunction App() {\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <header>{navbar()}</header>\n      <main className=\"flex-1 overflow-y-auto mb-20\">{taskUI()}</main>\n      <footer className=\"fixed bottom-0 w-full isolation-auto\">\n        {footer()}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { Provider } from \"react-redux\";\nimport store, { persistor } from \"./store\";\n\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { far } from \"@fortawesome/free-regular-svg-icons\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nlibrary.add(fab, fas, far);\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}