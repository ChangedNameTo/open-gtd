{"version":3,"sources":["Components/TaskUI/Task/TaskInterface.ts","Components/TaskUI/TaskList/TaskListSlice.ts","Components/TaskUI/TaskListFilter/TaskFilterSlice.ts","Components/TaskFilterPreset/TaskFilterPresetSlice.ts","Components/ProjectUI/ProjectList/ProjectListSlice.tsx","store.ts","reportWebVitals.js","Components/UserProfileDropdown.tsx","Components/Sidebars/Sidebar.tsx","Components/Sidebars/MobileSidebar.tsx","Components/PinnedProjects/PinnedProjects.tsx","hooks.ts","Components/TaskUI/TaskListFilter/TaskListFilterSelect.tsx","Components/TaskUI/TaskListFilter/TaskListFilters.tsx","Components/TaskUI/SearchHeader/SearchHeader.tsx","Components/TaskUI/Task/TinyTask.tsx","Components/TaskUI/Task/Task.tsx","Components/TaskUI/TaskList/TaskList.tsx","Components/TaskUI/SelectedTask/PrioritySelect.tsx","Components/ButtonGroup/ButtonGroup.tsx","Components/TaskUI/SelectedTask/ProjectSelect.tsx","Components/TaskUI/SelectedTask/SelectedTask.tsx","Components/TaskUI/TasksHeader/AddNewTask/AddNewTask.tsx","Components/TaskUI/TasksHeader/TasksHeader.tsx","Components/TaskUI/TaskUI.tsx","Components/ProjectUI/ProjectHeader/AddNewProject/AddNewProject.tsx","Components/ProjectUI/ProjectHeader/ProjectHeader.tsx","Components/ProjectUI/Project/TinyProject.tsx","Components/ProjectUI/ProjectList/ProjectList.tsx","Components/ProjectUI/ProjectUI.tsx","App.tsx","index.tsx"],"names":["TaskStatus","TaskPriority","enableMapSet","taskListSlice","createSlice","name","initialState","taskList","byId","allIds","selectedTask","reducers","addTask","state","action","payload","task","newTaskId","String","length","newTaskProject","project","note","status","Active","priority","None","dueDate","deferDate","created","Date","now","modified","completed","archived","push","selectTask","updateTaskTaskName","taskId","newName","updateTaskTaskStatus","newStatus","Complete","updateTaskTaskNote","newNote","updateTaskTaskPriority","newPriority","updateTaskTaskDeferDate","newDate","updateTaskTaskDueDate","updateTaskTaskProject","newProject","archiveTask","actions","getTasks","tasks","getSelectedTaskId","getSelectedTask","selected","taskFilterSlice","completion","hasNote","setCompletionFilter","setPriorityFilter","setHasNoteFilter","clearAllFilters","getFilters","filters","taskFilterPresetSlice","taskFilters","selectedFilter","addFilterPreset","newTaskFilterPresetId","clearFilterPresets","projectListSlice","projectList","addProject","newProjectId","pinned","getProjects","projects","persistConfig","key","storage","blacklist","taskPersistConfig","filtersPersistConfig","presetsPersistConfig","projectsPersistConfig","combineReducers","persistReducer","taskReducer","taskFilterReducer","presets","taskFilterPresetReducer","projectReducer","persistedReducer","store","configureStore","reducer","middleware","thunk","persistor","persistStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","classNames","classes","filter","Boolean","join","UserProfileDropdown","as","className","open","Button","src","alt","aria-hidden","show","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","static","Item","active","teams","href","bgColorClass","Sidebar","sidebarOpen","setSidebarOpen","currentURL","useLocation","pathname","section","split","isActive","navigation","icon","HomeIcon","current","ClipboardListIcon","htmlFor","type","id","placeholder","map","item","to","aria-current","undefined","role","aria-labelledby","team","target","rel","MobileSidebar","Root","onClose","Child","Overlay","onClick","pinnedProjects","title","initials","members","handle","imageUrl","totalMembers","lastUpdated","PinnedProjects","projectId","useAppDispatch","useDispatch","useSelector","TaskListFilterSelect","currentFilterValue","updateFilterFunction","filterLabel","optionArray","handleBooleanValues","filterValue","value","onChange","e","Label","Options","Option","TaskListFilters","dispatch","currentFilters","Dropped","Low","Medium","High","Immediate","SearchHeader","method","TinyTask","props","Task","setSelectTask","currentTarget","updateTaskStatus","projectName","formatTaskDates","date","toLocaleDateString","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","taskCheckboxIcon","text","noteIcon","TaskList","taskListFilters","getTaskById","hasNoteFilter","priorityFilter","completionFilter","archivedFilter","inSelectedProjectFilter","index","buildTinyTaskList","buildTaskList","priorityOptions","label","PrioritySelect","selectedTaskId","currentPriority","updateTaskPriority","ButtonGroup","buttonGroupSelectedOption","onClickArg","options","idPrefix","buttonIsActive","option","convertOptionText","buttonText","leftButton","slice","rightButton","ProjectSelect","selectedProjectId","setProject","ProjectSelectOption","SelectedTask","useState","setOpen","useEffect","styleDates","toLocaleString","taskSubsectionHeader","subsectionHeader","datepicker","dateChangeFunction","placeholderText","chosenDate","isClearable","dateFormat","todayButton","openToDate","afterLeave","Title","rows","updateTaskName","projectID","getTime","updateTaskNote","AddNewTask","taskText","setTaskText","createNewTask","trim","Panel","onKeyDown","shiftKey","preventDefault","onEnterPress","TaskHeader","TaskUI","AddNewProject","projectText","setProjectText","createNewProject","ProjectHeader","TinyProject","ProjectList","taskInProjectFilter","buildTinyProjectList","buildProjectTaskList","projectFilteredTaskIds","colSpan","ProjectUI","Example","exact","path","ReactDOM","loading","basename","document","getElementById"],"mappings":"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","file":"static/js/main.4f000000.chunk.js","sourcesContent":["export enum TaskStatus {\r\n  Active = \"Active\",\r\n  Complete = \"Complete\",\r\n  Dropped = \"Dropped\",\r\n}\r\n\r\nexport enum TaskPriority {\r\n  None = \"None\",\r\n  Low = \"Low ✅\",\r\n  Medium = \"Medium ⚠️\",\r\n  High = \"High 🛑\",\r\n  Immediate = \"Immediate ⛔️\",\r\n}\r\n\r\nexport default interface Task {\r\n  // The actual task text\r\n  task: string;\r\n\r\n  // Anything placed into the note text box\r\n  note: string;\r\n\r\n  // One of the three possible statuses that a task can have\r\n  status: TaskStatus;\r\n\r\n  // One of the five possible priorities, default None\r\n  priority: TaskPriority;\r\n\r\n  // Select when this task is actually needing to be completed\r\n  dueDate: number | null;\r\n  deferDate: number | null;\r\n\r\n  project: string | null;\r\n\r\n  // Timestamps\r\n  readonly created: number;\r\n  modified: number;\r\n  completed: number;\r\n  archived: number | null;\r\n}\r\n","import { enableMapSet } from \"immer\";\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../../store\";\r\n\r\nimport TaskList from \"./TaskListInterface\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\n\r\nenableMapSet();\r\n\r\nconst initialState: TaskList = {\r\n  taskList: { byId: {}, allIds: [] },\r\n  selectedTask: null,\r\n};\r\n\r\nexport const taskListSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState,\r\n  reducers: {\r\n    addTask: (state: TaskList, action: PayloadAction<any>) => {\r\n      // Do not add task if the field is empty\r\n      if (action.payload.task === \"\") {\r\n        return;\r\n      }\r\n\r\n      const newTaskId = String(state.taskList.allIds.length);\r\n      const newTaskProject = action.payload.project\r\n        ? action.payload.project\r\n        : null;\r\n\r\n      state.taskList.byId[newTaskId] = {\r\n        task: action.payload.task,\r\n\r\n        note: \"\",\r\n\r\n        status: TaskStatus.Active,\r\n\r\n        priority: TaskPriority.None,\r\n\r\n        dueDate: null,\r\n        deferDate: null,\r\n\r\n        project: newTaskProject,\r\n\r\n        created: Date.now(),\r\n        modified: Date.now(),\r\n        completed: -1,\r\n        archived: null,\r\n      };\r\n      state.taskList.allIds.push(newTaskId);\r\n    },\r\n    selectTask: (state: TaskList, action: PayloadAction<string | null>) => {\r\n      state.selectedTask = action.payload;\r\n    },\r\n    updateTaskTaskName: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.task = action.payload.newName;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskStatus: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.status = action.payload.newStatus;\r\n\r\n      if (task.status === TaskStatus.Complete) {\r\n        task.completed = Date.now();\r\n      } else {\r\n        task.completed = -1;\r\n      }\r\n\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskNote: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.note = action.payload.newNote;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskPriority: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.priority = action.payload.newPriority;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskDeferDate: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.deferDate = action.payload.newDate;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskDueDate: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.dueDate = action.payload.newDate;\r\n      task.modified = Date.now();\r\n    },\r\n    updateTaskTaskProject: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.project = action.payload.newProject;\r\n      task.modified = Date.now();\r\n    },\r\n    archiveTask: (state: TaskList, action: PayloadAction<any>) => {\r\n      const task = state.taskList.byId[action.payload.taskId];\r\n\r\n      task.archived = Date.now();\r\n      task.modified = Date.now();\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  selectTask,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n  updateTaskTaskPriority,\r\n  updateTaskTaskDeferDate,\r\n  updateTaskTaskDueDate,\r\n  updateTaskTaskProject,\r\n  archiveTask,\r\n} = taskListSlice.actions;\r\n\r\nexport const getTasks = (state: RootState) => state.tasks.taskList;\r\nexport const getSelectedTaskId = (state: RootState) => state.tasks.selectedTask;\r\nexport const getSelectedTask = (state: RootState) => {\r\n  const selected = state.tasks.selectedTask;\r\n  if (selected !== null) {\r\n    return state.tasks.taskList.byId[selected];\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default taskListSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../../store\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\nimport TaskFilter from \"./TaskFiltersInterface\";\r\n\r\nconst initialState: TaskFilter = {\r\n  completion: null,\r\n  priority: null,\r\n  hasNote: null,\r\n};\r\n\r\nexport const taskFilterSlice = createSlice({\r\n  name: \"filters\",\r\n  initialState,\r\n  reducers: {\r\n    setCompletionFilter: (\r\n      state: TaskFilter,\r\n      action: PayloadAction<TaskStatus>\r\n    ) => {\r\n      state.completion = action.payload;\r\n    },\r\n    setPriorityFilter: (\r\n      state: TaskFilter,\r\n      action: PayloadAction<TaskPriority>\r\n    ) => {\r\n      state.priority = action.payload;\r\n    },\r\n    setHasNoteFilter: (state: TaskFilter, action: PayloadAction<boolean>) => {\r\n      state.hasNote = action.payload;\r\n    },\r\n    clearAllFilters: (state: TaskFilter) => {\r\n      state.completion = null;\r\n      state.priority = null;\r\n      state.hasNote = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCompletionFilter,\r\n  setPriorityFilter,\r\n  setHasNoteFilter,\r\n  clearAllFilters,\r\n} = taskFilterSlice.actions;\r\n\r\nexport const getFilters = (state: RootState) => state.filters;\r\n\r\nexport default taskFilterSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport TaskFilter, {\r\n  TaskFilterPreset,\r\n} from \"../TaskUI/TaskListFilter/TaskFiltersInterface\";\r\nimport { RootState } from \"../../store\";\r\n\r\nconst initialState: TaskFilterPreset = {\r\n  taskFilters: { byId: {}, allIds: [] },\r\n  selectedFilter: null,\r\n};\r\n\r\nexport const taskFilterPresetSlice = createSlice({\r\n  name: \"presets\",\r\n  initialState,\r\n  reducers: {\r\n    addFilterPreset: (\r\n      state: TaskFilterPreset,\r\n      action: PayloadAction<TaskFilter>\r\n    ) => {\r\n      const newTaskFilterPresetId = String(state.taskFilters.allIds.length);\r\n\r\n      state.taskFilters.byId[newTaskFilterPresetId] = action.payload;\r\n      state.taskFilters.allIds.push(newTaskFilterPresetId);\r\n    },\r\n    clearFilterPresets: (state: TaskFilterPreset) => {\r\n      state.taskFilters.byId = {};\r\n      state.taskFilters.allIds = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addFilterPreset,\r\n  clearFilterPresets,\r\n} = taskFilterPresetSlice.actions;\r\n\r\nexport const getTaskFilterPresets = (state: RootState) =>\r\n  state.presets.taskFilters;\r\n\r\nexport default taskFilterPresetSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport ProjectList from \"./ProjectListInterface\";\r\nimport { RootState } from \"../../../store\";\r\n\r\nconst initialState: ProjectList = {\r\n  projectList: { byId: {}, allIds: [] },\r\n};\r\n\r\nexport const projectListSlice = createSlice({\r\n  name: \"projects\",\r\n  initialState,\r\n  reducers: {\r\n    addProject: (state: ProjectList, action: PayloadAction<string>) => {\r\n      if (action.payload === \"\") {\r\n        return;\r\n      }\r\n\r\n      const newProjectId = String(state.projectList.allIds.length);\r\n\r\n      state.projectList.byId[newProjectId] = {\r\n        project: action.payload,\r\n\r\n        pinned: false,\r\n\r\n        created: Date.now(),\r\n        modified: Date.now(),\r\n        completed: -1,\r\n        archived: null,\r\n      };\r\n\r\n      state.projectList.allIds.push(newProjectId);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addProject } = projectListSlice.actions;\r\n\r\nexport const getProjects = (state: RootState) => state.projects.projectList;\r\n\r\nexport default projectListSlice.reducer;\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n// Change this to electron storage when I switch to electron\r\nimport { persistReducer, persistStore } from \"redux-persist\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport taskReducer from \"./Components/TaskUI/TaskList/TaskListSlice\";\r\nimport taskFilterReducer from \"./Components/TaskUI/TaskListFilter/TaskFilterSlice\";\r\nimport taskFilterPresetReducer from \"./Components/TaskFilterPreset/TaskFilterPresetSlice\";\r\nimport projectReducer from \"./Components/ProjectUI/ProjectList/ProjectListSlice\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  blacklist: [\"tasks\", \"presets\", \"projects\"],\r\n};\r\n\r\nconst taskPersistConfig = {\r\n  key: \"tasks\",\r\n  storage,\r\n  blacklist: [\"selectedTask\"],\r\n};\r\n\r\nconst filtersPersistConfig = {\r\n  key: \"filters\",\r\n  storage,\r\n};\r\n\r\nconst presetsPersistConfig = {\r\n  key: \"presets\",\r\n  storage,\r\n};\r\n\r\nconst projectsPersistConfig = {\r\n  key: \"projects\",\r\n  storage,\r\n};\r\n\r\nconst reducers = combineReducers({\r\n  tasks: persistReducer(taskPersistConfig, taskReducer),\r\n  filters: persistReducer(filtersPersistConfig, taskFilterReducer),\r\n  presets: persistReducer(presetsPersistConfig, taskFilterPresetReducer),\r\n  projects: persistReducer(projectsPersistConfig, projectReducer),\r\n});\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: [thunk],\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const persistor = persistStore(store);\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Menu, Transition } from \"@headlessui/react\";\r\nimport { SelectorIcon } from \"@heroicons/react/solid\";\r\nimport { Fragment } from \"react\";\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction UserProfileDropdown() {\r\n  return (\r\n    <Menu as=\"div\" className=\"px-3 mt-6 relative inline-block text-left\">\r\n      {({ open }) => (\r\n        <>\r\n          <div>\r\n            <Menu.Button className=\"group w-full bg-gray-100 rounded-md px-3.5 py-2 text-sm text-left font-medium text-gray-700 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-purple-500\">\r\n              <span className=\"flex w-full justify-between items-center\">\r\n                <span className=\"flex min-w-0 items-center justify-between space-x-3\">\r\n                  <img\r\n                    className=\"w-10 h-10 bg-gray-300 rounded-full flex-shrink-0\"\r\n                    src=\"https://avatars.githubusercontent.com/u/9056294?s=400&u=ec70834818e3ea5d1423849ad4f8507d8deed970&v=4\"\r\n                    alt=\"\"\r\n                  />\r\n                  <span className=\"flex-1 flex flex-col min-w-0\">\r\n                    <span className=\"text-gray-900 text-sm font-medium truncate\">\r\n                      Will Mitchell\r\n                    </span>\r\n                    <span className=\"text-gray-500 text-sm truncate\">\r\n                      @will_mitch\r\n                    </span>\r\n                  </span>\r\n                </span>\r\n                <SelectorIcon\r\n                  className=\"flex-shrink-0 h-5 w-5 text-gray-400 group-hover:text-gray-500\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            </Menu.Button>\r\n          </div>\r\n          <Transition\r\n            show={open}\r\n            as={Fragment}\r\n            enter=\"transition ease-out duration-100\"\r\n            enterFrom=\"transform opacity-0 scale-95\"\r\n            enterTo=\"transform opacity-100 scale-100\"\r\n            leave=\"transition ease-in duration-75\"\r\n            leaveFrom=\"transform opacity-100 scale-100\"\r\n            leaveTo=\"transform opacity-0 scale-95\"\r\n          >\r\n            <Menu.Items\r\n              static\r\n              className=\"z-10 mx-3 origin-top absolute right-0 left-0 mt-1 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-200 focus:outline-none\"\r\n            >\r\n              <div className=\"py-1\">\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      View profile - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Settings - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Notifications - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n              </div>\r\n              <div className=\"py-1\">\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Get desktop app - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Support - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n              </div>\r\n              <div className=\"py-1\">\r\n                <Menu.Item>\r\n                  {({ active }) => (\r\n                    <button\r\n                      className={classNames(\r\n                        active ? \"bg-gray-100 text-gray-900\" : \"text-gray-700\",\r\n                        \"block px-4 py-2 text-sm w-full text-left\"\r\n                      )}\r\n                    >\r\n                      Logout - Does Nothing\r\n                    </button>\r\n                  )}\r\n                </Menu.Item>\r\n              </div>\r\n            </Menu.Items>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Menu>\r\n  );\r\n}\r\n\r\nexport default UserProfileDropdown;\r\n","import UserProfileDropdown from \"../UserProfileDropdown\";\r\nimport {\r\n  HomeIcon,\r\n  SearchIcon,\r\n  ClipboardListIcon,\r\n} from \"@heroicons/react/outline\";\r\n\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nconst teams = [\r\n  { name: \"Doesn't Do Anything\", href: \"#\", bgColorClass: \"bg-indigo-500\" },\r\n];\r\n\r\n/**\r\n * Returns the Sidebar component\r\n * @return {FunctionComponent}\r\n */\r\nfunction Sidebar(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  const currentURL = useLocation().pathname;\r\n  const section = currentURL ? currentURL.split(\"/\")[1] : null;\r\n\r\n  const isActive = (href: string) => section === href;\r\n\r\n  const navigation = [\r\n    {\r\n      name: \"Inbox\",\r\n      href: \"/inbox\",\r\n      icon: HomeIcon,\r\n      current: isActive(\"inbox\"),\r\n    },\r\n    {\r\n      name: \"Projects\",\r\n      href: \"/projects\",\r\n      icon: ClipboardListIcon,\r\n      current: isActive(\"projects\"),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"hidden lg:flex lg:flex-shrink-0\">\r\n      <div className=\"flex flex-col w-64 border-r border-gray-200 pt-5 bg-gray-100\">\r\n        <div className=\"flex items-center flex-shrink-0 px-6\">\r\n          <img\r\n            className=\"h-8 w-auto\"\r\n            src=\"https://tailwindui.com/img/logos/workflow-logo-purple-500-mark-gray-700-text.svg\"\r\n            alt=\"Workflow\"\r\n          />\r\n        </div>\r\n        {/* Sidebar component, swap this element with another sidebar if you like */}\r\n        <div className=\"h-0 flex-1 flex flex-col overflow-y-auto\">\r\n          {/* User account dropdown */}\r\n          {UserProfileDropdown()}\r\n          {/* Sidebar Search */}\r\n          <div className=\"px-3 mt-5\">\r\n            <label htmlFor=\"search\" className=\"sr-only\">\r\n              Search\r\n            </label>\r\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n              <div\r\n                className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\"\r\n                aria-hidden=\"true\"\r\n              >\r\n                <SearchIcon\r\n                  className=\"mr-3 h-4 w-4 text-gray-400\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </div>\r\n              <input\r\n                type=\"text\"\r\n                name=\"search\"\r\n                id=\"search\"\r\n                className=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-9 sm:text-sm border-gray-300 rounded-md\"\r\n                placeholder=\"Search\"\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* Navigation */}\r\n          <nav className=\"px-3 mt-6\">\r\n            <div className=\"space-y-1\">\r\n              {navigation.map((item) => (\r\n                <Link\r\n                  key={item.name}\r\n                  href={item.href}\r\n                  to={`${item.href}`}\r\n                  className={classNames(\r\n                    item.current\r\n                      ? \"bg-gray-200 text-gray-900\"\r\n                      : \"text-gray-700 hover:text-gray-900 hover:bg-gray-50\",\r\n                    \"group flex items-center px-2 py-2 text-sm font-medium rounded-md\"\r\n                  )}\r\n                  aria-current={item.current ? \"page\" : undefined}\r\n                >\r\n                  <item.icon\r\n                    className={classNames(\r\n                      item.current\r\n                        ? \"text-gray-500\"\r\n                        : \"text-gray-400 group-hover:text-gray-500\",\r\n                      \"mr-3 h-6 w-6\"\r\n                    )}\r\n                    aria-hidden=\"true\"\r\n                  />\r\n                  {item.name}\r\n                </Link>\r\n              ))}\r\n            </div>\r\n            <div className=\"mt-8\">\r\n              {/* Secondary navigation */}\r\n              <h3\r\n                className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider\"\r\n                id=\"teams-headline\"\r\n              >\r\n                Teams\r\n              </h3>\r\n              <div\r\n                className=\"mt-1 space-y-1\"\r\n                role=\"group\"\r\n                aria-labelledby=\"teams-headline\"\r\n              >\r\n                {teams.map((team) => (\r\n                  <a\r\n                    key={team.name}\r\n                    href={team.href}\r\n                    className=\"group flex items-center px-3 py-2 text-sm font-medium text-gray-700 rounded-md hover:text-gray-900 hover:bg-gray-50\"\r\n                  >\r\n                    <span\r\n                      className={classNames(\r\n                        team.bgColorClass,\r\n                        \"w-2.5 h-2.5 mr-4 rounded-full\"\r\n                      )}\r\n                      aria-hidden=\"true\"\r\n                    />\r\n                    <span className=\"truncate\">{team.name}</span>\r\n                  </a>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </div>\r\n        <div className=\"flex-shrink-0 bg-gray-700 p-4 divide-y\">\r\n          <a\r\n            href=\"https://github.com/ChangedNameTo/open-gtd\"\r\n            className=\"flex-shrink-0 w-full group block\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            <div className=\"flex items-center\">\r\n              <div>\r\n                <img\r\n                  className=\"inline-block h-9 w-9 rounded-full\"\r\n                  src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\r\n                  alt=\"\"\r\n                />\r\n              </div>\r\n              <div className=\"ml-3\">\r\n                <p className=\"text-sm font-medium text-white\">OpenGTD Github</p>\r\n                <p className=\"text-xs font-medium text-gray-300 group-hover:text-gray-200\">\r\n                  Follow the Project\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import { Fragment } from \"react\";\r\nimport { Dialog, Transition } from \"@headlessui/react\";\r\nimport { HomeIcon, XIcon } from \"@heroicons/react/solid\";\r\n\r\nconst navigation = [\r\n  { name: \"Tasks\", href: \"#\", icon: HomeIcon, current: true },\r\n];\r\n\r\nconst teams = [\r\n  { name: \"Doesn't Do Anything\", href: \"#\", bgColorClass: \"bg-indigo-500\" },\r\n];\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction MobileSidebar(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  return (\r\n    <Transition.Root show={sidebarOpen} as={Fragment}>\r\n      <Dialog\r\n        as=\"div\"\r\n        static\r\n        className=\"fixed inset-0 flex z-40 lg:hidden\"\r\n        open={sidebarOpen}\r\n        onClose={() => setSidebarOpen(!sidebarOpen)}\r\n      >\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"transition-opacity ease-linear duration-300\"\r\n          enterFrom=\"opacity-0\"\r\n          enterTo=\"opacity-100\"\r\n          leave=\"transition-opacity ease-linear duration-300\"\r\n          leaveFrom=\"opacity-100\"\r\n          leaveTo=\"opacity-0\"\r\n        >\r\n          <Dialog.Overlay className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" />\r\n        </Transition.Child>\r\n        <Transition.Child\r\n          as={Fragment}\r\n          enter=\"transition ease-in-out duration-300 transform\"\r\n          enterFrom=\"-translate-x-full\"\r\n          enterTo=\"translate-x-0\"\r\n          leave=\"transition ease-in-out duration-300 transform\"\r\n          leaveFrom=\"translate-x-0\"\r\n          leaveTo=\"-translate-x-full\"\r\n        >\r\n          <div className=\"relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-white\">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-in-out duration-300\"\r\n              enterFrom=\"opacity-0\"\r\n              enterTo=\"opacity-100\"\r\n              leave=\"ease-in-out duration-300\"\r\n              leaveFrom=\"opacity-100\"\r\n              leaveTo=\"opacity-0\"\r\n            >\r\n              <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\r\n                <button\r\n                  className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\"\r\n                  onClick={() => setSidebarOpen(false)}\r\n                >\r\n                  <span className=\"sr-only\">Close sidebar</span>\r\n                  <XIcon className=\"h-6 w-6 text-white\" aria-hidden=\"true\" />\r\n                </button>\r\n              </div>\r\n            </Transition.Child>\r\n            <div className=\"flex-shrink-0 flex items-center px-4\">\r\n              <img\r\n                className=\"h-8 w-auto\"\r\n                src=\"https://tailwindui.com/img/logos/workflow-logo-purple-500-mark-gray-700-text.svg\"\r\n                alt=\"Workflow\"\r\n              />\r\n            </div>\r\n            <div className=\"mt-5 flex-1 h-0 overflow-y-auto\">\r\n              <nav className=\"px-2\">\r\n                <div className=\"space-y-1\">\r\n                  {navigation.map((item) => (\r\n                    <a\r\n                      key={item.name}\r\n                      href={item.href}\r\n                      className={classNames(\r\n                        item.current\r\n                          ? \"bg-gray-100 text-gray-900\"\r\n                          : \"text-gray-600 hover:text-gray-900 hover:bg-gray-50\",\r\n                        \"group flex items-center px-2 py-2 text-base leading-5 font-medium rounded-md\"\r\n                      )}\r\n                      aria-current={item.current ? \"page\" : undefined}\r\n                    >\r\n                      <item.icon\r\n                        className={classNames(\r\n                          item.current\r\n                            ? \"text-gray-500\"\r\n                            : \"text-gray-400 group-hover:text-gray-500\",\r\n                          \"mr-3 h-6 w-6\"\r\n                        )}\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                      {item.name}\r\n                    </a>\r\n                  ))}\r\n                </div>\r\n                <div className=\"mt-8\">\r\n                  <h3\r\n                    className=\"px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider\"\r\n                    id=\"teams-headline\"\r\n                  >\r\n                    Teams\r\n                  </h3>\r\n                  <div\r\n                    className=\"mt-1 space-y-1\"\r\n                    role=\"group\"\r\n                    aria-labelledby=\"teams-headline\"\r\n                  >\r\n                    {teams.map((team) => (\r\n                      <a\r\n                        key={team.name}\r\n                        href={team.href}\r\n                        className=\"group flex items-center px-3 py-2 text-base leading-5 font-medium text-gray-600 rounded-md hover:text-gray-900 hover:bg-gray-50\"\r\n                      >\r\n                        <span\r\n                          className={classNames(\r\n                            team.bgColorClass,\r\n                            \"w-2.5 h-2.5 mr-4 rounded-full\"\r\n                          )}\r\n                          aria-hidden=\"true\"\r\n                        />\r\n                        <span className=\"truncate\">{team.name}</span>\r\n                      </a>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </nav>\r\n            </div>\r\n          </div>\r\n        </Transition.Child>\r\n        <div className=\"flex-shrink-0 w-14\" aria-hidden=\"true\">\r\n          {/* Dummy element to force sidebar to shrink to fit close icon */}\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  );\r\n}\r\n\r\nexport default MobileSidebar;\r\n","import { Fragment } from \"react\";\r\n\r\nimport { Menu, Transition } from \"@headlessui/react\";\r\nimport { DotsVerticalIcon } from \"@heroicons/react/solid\";\r\n\r\nconst projects = [\r\n  {\r\n    id: 1,\r\n    title: \"Does Nothing\",\r\n    initials: \"GA\",\r\n    team: \"Engineering\",\r\n    members: [\r\n      {\r\n        name: \"Dries Vincent\",\r\n        handle: \"driesvincent\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n      {\r\n        name: \"Lindsay Walton\",\r\n        handle: \"lindsaywalton\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n      {\r\n        name: \"Courtney Henry\",\r\n        handle: \"courtneyhenry\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n      {\r\n        name: \"Tom Cook\",\r\n        handle: \"tomcook\",\r\n        imageUrl:\r\n          \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\",\r\n      },\r\n    ],\r\n    totalMembers: 12,\r\n    lastUpdated: \"March 17, 2020\",\r\n    pinned: true,\r\n    bgColorClass: \"bg-pink-600\",\r\n  },\r\n  // More projects...\r\n];\r\nconst pinnedProjects = projects.filter((project) => project.pinned);\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction PinnedProjects(projectId: string | null) {\r\n  if (projectId) {\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <div className=\"px-4 mt-6 mb-8 sm:px-6 lg:px-8\">\r\n      <h2 className=\"text-gray-500 text-xs font-medium uppercase tracking-wide\">\r\n        Pinned Projects\r\n      </h2>\r\n      <ul className=\"grid grid-cols-1 gap-4 sm:gap-6 sm:grid-cols-2 xl:grid-cols-4 mt-3\">\r\n        {pinnedProjects.map((project) => (\r\n          <li\r\n            key={project.id}\r\n            className=\"relative col-span-1 flex shadow-sm rounded-md\"\r\n          >\r\n            <div\r\n              className={classNames(\r\n                project.bgColorClass,\r\n                \"flex-shrink-0 flex items-center justify-center w-16 text-white text-sm font-medium rounded-l-md\"\r\n              )}\r\n            >\r\n              {project.initials}\r\n            </div>\r\n            <div className=\"flex-1 flex items-center justify-between border-t border-r border-b border-gray-200 bg-white rounded-r-md truncate\">\r\n              <div className=\"flex-1 px-4 py-2 text-sm truncate\">\r\n                <div className=\"text-gray-900 font-medium hover:text-gray-600\">\r\n                  {project.title}\r\n                </div>\r\n                <p className=\"text-gray-500\">{project.totalMembers} Members</p>\r\n              </div>\r\n              <Menu as=\"div\" className=\"flex-shrink-0 pr-2\">\r\n                {({ open }) => (\r\n                  <>\r\n                    <Menu.Button className=\"w-8 h-8 bg-white inline-flex items-center justify-center text-gray-400 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\">\r\n                      <span className=\"sr-only\">Open options</span>\r\n                      <DotsVerticalIcon\r\n                        className=\"w-5 h-5\"\r\n                        aria-hidden=\"true\"\r\n                      />\r\n                    </Menu.Button>\r\n                    <Transition\r\n                      show={open}\r\n                      as={Fragment}\r\n                      enter=\"transition ease-out duration-100\"\r\n                      enterFrom=\"transform opacity-0 scale-95\"\r\n                      enterTo=\"transform opacity-100 scale-100\"\r\n                      leave=\"transition ease-in duration-75\"\r\n                      leaveFrom=\"transform opacity-100 scale-100\"\r\n                      leaveTo=\"transform opacity-0 scale-95\"\r\n                    >\r\n                      <Menu.Items\r\n                        static\r\n                        className=\"z-10 mx-3 origin-top-right absolute right-0 top-3 w-72 mt-1 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-200 focus:outline-none\"\r\n                      >\r\n                        <div className=\"py-1\">\r\n                          <Menu.Item>\r\n                            {({ active }) => (\r\n                              <button\r\n                                className={classNames(\r\n                                  active\r\n                                    ? \"bg-gray-100 text-gray-900\"\r\n                                    : \"text-gray-700\",\r\n                                  \"block px-4 py-2 text-sm w-full text-left\"\r\n                                )}\r\n                              >\r\n                                View - Does Nothing\r\n                              </button>\r\n                            )}\r\n                          </Menu.Item>\r\n                        </div>\r\n                        <div className=\"py-1\">\r\n                          <Menu.Item>\r\n                            {({ active }) => (\r\n                              <button\r\n                                className={classNames(\r\n                                  active\r\n                                    ? \"bg-gray-100 text-gray-900\"\r\n                                    : \"text-gray-700\",\r\n                                  \"block px-4 py-2 text-sm w-full text-left\"\r\n                                )}\r\n                              >\r\n                                Removed from pinned - Does Nothing\r\n                              </button>\r\n                            )}\r\n                          </Menu.Item>\r\n                          <Menu.Item>\r\n                            {({ active }) => (\r\n                              <button\r\n                                className={classNames(\r\n                                  active\r\n                                    ? \"bg-gray-100 text-gray-900\"\r\n                                    : \"text-gray-700\",\r\n                                  \"block px-4 py-2 text-sm w-full text-left\"\r\n                                )}\r\n                              >\r\n                                Share - Does Nothing\r\n                              </button>\r\n                            )}\r\n                          </Menu.Item>\r\n                        </div>\r\n                      </Menu.Items>\r\n                    </Transition>\r\n                  </>\r\n                )}\r\n              </Menu>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PinnedProjects;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './store'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { Listbox, Transition } from \"@headlessui/react\";\r\nimport { Fragment } from \"react\";\r\nimport { SelectorIcon, CheckIcon } from \"@heroicons/react/outline\";\r\n\r\nfunction classNames(...classes: any[]) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction TaskListFilterSelect(\r\n  currentFilterValue: any | null,\r\n  updateFilterFunction: Function,\r\n  filterLabel: string,\r\n  optionArray: any[]\r\n) {\r\n  const handleBooleanValues = (filterValue: any) => {\r\n    if (filterValue === true) {\r\n      return \"True\";\r\n    } else if (filterValue === false) {\r\n      return \"False\";\r\n    } else if (filterValue === null) {\r\n      return \"N/A\";\r\n    } else {\r\n      return filterValue;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Listbox\r\n      value={currentFilterValue}\r\n      onChange={(e) => updateFilterFunction(e)}\r\n    >\r\n      {({ open }) => (\r\n        <>\r\n          <Listbox.Label className=\"block text-sm font-bold\">\r\n            {filterLabel}\r\n          </Listbox.Label>\r\n          <div className=\"mt-1 relative\">\r\n            <Listbox.Button className=\"bg-white relative w-full max-w-1/6 border border-gray-300 rounded-md shadow-sm pl-3 pr-10 md:py-2 sm:py-1 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\r\n              <span className=\"block truncate\">\r\n                {handleBooleanValues(currentFilterValue)}\r\n              </span>\r\n              <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\r\n                <SelectorIcon\r\n                  className=\"h-5 w-5 text-gray-400\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            </Listbox.Button>\r\n          </div>\r\n          <Transition\r\n            show={open}\r\n            as={Fragment}\r\n            leave=\"transition ease-in duration-100\"\r\n            leaveFrom=\"opacity-100\"\r\n            leaveTo=\"opacity-0\"\r\n          >\r\n            <Listbox.Options\r\n              static\r\n              className=\"absolute z-10 mt-1 w-1/4 bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\"\r\n            >\r\n              {optionArray.map((status) => (\r\n                <Listbox.Option\r\n                  key={status}\r\n                  className={({ active }) =>\r\n                    classNames(\r\n                      active ? \"text-white bg-indigo-600\" : \"text-gray-900\",\r\n                      \"cursor-default select-none relative py-2 pl-3 pr-9\"\r\n                    )\r\n                  }\r\n                  value={status}\r\n                >\r\n                  {({ selected, active }) => (\r\n                    <>\r\n                      <span\r\n                        className={classNames(\r\n                          selected ? \"font-semibold\" : \"font-normal\",\r\n                          \"block truncate\"\r\n                        )}\r\n                      >\r\n                        {handleBooleanValues(status)}\r\n                      </span>\r\n\r\n                      {selected ? (\r\n                        <span\r\n                          className={classNames(\r\n                            active ? \"text-white\" : \"text-indigo-600\",\r\n                            \"absolute inset-y-0 right-0 flex items-center pr-4\"\r\n                          )}\r\n                        >\r\n                          <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n                        </span>\r\n                      ) : null}\r\n                    </>\r\n                  )}\r\n                </Listbox.Option>\r\n              ))}\r\n            </Listbox.Options>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Listbox>\r\n  );\r\n}\r\n\r\nexport default TaskListFilterSelect;\r\n","import { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../../hooks\";\r\nimport { TaskPriority, TaskStatus } from \"../Task/TaskInterface\";\r\nimport { addFilterPreset } from \"../../TaskFilterPreset/TaskFilterPresetSlice\";\r\nimport TaskListFilterSelect from \"./TaskListFilterSelect\";\r\nimport {\r\n  getFilters,\r\n  setCompletionFilter,\r\n  setPriorityFilter,\r\n  setHasNoteFilter,\r\n  clearAllFilters,\r\n} from \"./TaskFilterSlice\";\r\n\r\nfunction TaskListFilters() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currentFilters = useSelector(getFilters);\r\n\r\n  const updateCompletionFilter = (status: TaskStatus) => {\r\n    dispatch(setCompletionFilter(status));\r\n  };\r\n\r\n  const updatePriorityFilter = (status: TaskPriority) => {\r\n    dispatch(setPriorityFilter(status));\r\n  };\r\n\r\n  const updateHasNoteFilter = (status: boolean) => {\r\n    dispatch(setHasNoteFilter(status));\r\n  };\r\n\r\n  const saveClearAllFilters = () => {\r\n    dispatch(clearAllFilters());\r\n  };\r\n\r\n  const saveNewTaskFilterPreset = () => {\r\n    dispatch(addFilterPreset(currentFilters));\r\n  };\r\n\r\n  const filterDivClasses = () => {\r\n    return \"px-2 py-3 my-2 mx-2 md:mx-0 bg-white shadow rounded-lg\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"border-t w-full mx-auto sm:px-1 lg:px-3 bg-gray-100 grid md:grid-cols-4 md:gap-2 sm:grid-cols-1\">\r\n      <div className={filterDivClasses()}>\r\n        {TaskListFilterSelect(\r\n          currentFilters.completion,\r\n          updateCompletionFilter,\r\n          \"Task Status\",\r\n          [TaskStatus.Active, TaskStatus.Complete, TaskStatus.Dropped, null]\r\n        )}\r\n      </div>\r\n      <div className={filterDivClasses()}>\r\n        {TaskListFilterSelect(\r\n          currentFilters.priority,\r\n          updatePriorityFilter,\r\n          \"Task Priority\",\r\n          [\r\n            TaskPriority.None,\r\n            TaskPriority.Low,\r\n            TaskPriority.Medium,\r\n            TaskPriority.High,\r\n            TaskPriority.Immediate,\r\n            null,\r\n          ]\r\n        )}\r\n      </div>\r\n      <div className={filterDivClasses()}>\r\n        {TaskListFilterSelect(\r\n          currentFilters.hasNote,\r\n          updateHasNoteFilter,\r\n          \"Has Note?\",\r\n          [true, false, null]\r\n        )}\r\n      </div>\r\n      <div className={filterDivClasses()}>\r\n        <label className=\"block text-sm font-bold\">Filter Actions</label>\r\n        <div className=\"flex flex-row justify-center\">\r\n          <button\r\n            className=\"ml-3 mt-1 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-0 sm:ml-0\"\r\n            onClick={() => saveClearAllFilters()}\r\n          >\r\n            Clear All Filters\r\n          </button>\r\n          <button\r\n            className=\"mt-1 inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-1 ml-3\"\r\n            onClick={() => saveNewTaskFilterPreset()}\r\n          >\r\n            Save New Preset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskListFilters;\r\n","import { Fragment } from \"react\";\r\nimport { MenuAlt1Icon } from \"@heroicons/react/outline\";\r\nimport { SearchIcon } from \"@heroicons/react/solid\";\r\nimport { Menu, Transition } from \"@headlessui/react\";\r\n\r\n// @ts-ignore: Unreachable code error\r\nfunction classNames(...classes) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction SearchHeader(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  return (\r\n    <div className=\"relative z-10 flex-shrink-0 flex h-16 bg-white border-b border-gray-200 lg:hidden\">\r\n      <button\r\n        className=\"px-4 border-r border-gray-200 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-purple-500 lg:hidden\"\r\n        onClick={() => setSidebarOpen(true)}\r\n      >\r\n        <span className=\"sr-only\">Open sidebar</span>\r\n        <MenuAlt1Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n      </button>\r\n      <div className=\"flex-1 flex justify-between px-4 sm:px-6 lg:px-8\">\r\n        <div className=\"flex-1 flex\">\r\n          <form className=\"w-full flex md:ml-0\" action=\"#\" method=\"GET\">\r\n            <label htmlFor=\"search_field\" className=\"sr-only\">\r\n              Search\r\n            </label>\r\n            <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n              <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                <SearchIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n              </div>\r\n              <input\r\n                id=\"search_field\"\r\n                name=\"search_field\"\r\n                className=\"block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-0 focus:border-transparent focus:placeholder-gray-400 sm:text-sm\"\r\n                placeholder=\"Search\"\r\n                type=\"search\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"flex items-center\">\r\n          {/* Profile dropdown */}\r\n          <Menu as=\"div\" className=\"ml-3 relative\">\r\n            {({ open }) => (\r\n              <>\r\n                <div>\r\n                  <Menu.Button className=\"max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500\">\r\n                    <span className=\"sr-only\">Open user menu</span>\r\n                    <img\r\n                      className=\"h-8 w-8 rounded-full\"\r\n                      src=\"https://avatars.githubusercontent.com/u/9056294?s=400&u=ec70834818e3ea5d1423849ad4f8507d8deed970&v=4\"\r\n                      alt=\"\"\r\n                    />\r\n                  </Menu.Button>\r\n                </div>\r\n                <Transition\r\n                  show={open}\r\n                  as={Fragment}\r\n                  enter=\"transition ease-out duration-100\"\r\n                  enterFrom=\"transform opacity-0 scale-95\"\r\n                  enterTo=\"transform opacity-100 scale-100\"\r\n                  leave=\"transition ease-in duration-75\"\r\n                  leaveFrom=\"transform opacity-100 scale-100\"\r\n                  leaveTo=\"transform opacity-0 scale-95\"\r\n                >\r\n                  <Menu.Items\r\n                    static\r\n                    className=\"origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 divide-y divide-gray-200 focus:outline-none\"\r\n                  >\r\n                    <div className=\"py-1\">\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            View profile\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Settings\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Notifications\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                    </div>\r\n                    <div className=\"py-1\">\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Get Desktop App\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Support\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                    </div>\r\n                    <div className=\"py-1\">\r\n                      <Menu.Item>\r\n                        {({ active }) => (\r\n                          <button\r\n                            className={classNames(\r\n                              active\r\n                                ? \"bg-gray-100 text-gray-900\"\r\n                                : \"text-gray-700\",\r\n                              \"block px-4 py-2 text-sm w-full text-left\"\r\n                            )}\r\n                          >\r\n                            Logout\r\n                          </button>\r\n                        )}\r\n                      </Menu.Item>\r\n                    </div>\r\n                  </Menu.Items>\r\n                </Transition>\r\n              </>\r\n            )}\r\n          </Menu>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchHeader;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../store\";\r\nimport { ChevronRightIcon } from \"@heroicons/react/solid\";\r\n\r\n/**\r\n * Creates a task object for display.\r\n * @param props {Object} Contains the Task object that users will click on. This is the basic unit of all of open-gtd.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TinyTask(props: { taskId: string }) {\r\n  const task = useSelector(\r\n    (state: RootState) => state.tasks.taskList.byId[props.taskId]\r\n  );\r\n\r\n  return (\r\n    <li key={props.taskId}>\r\n      <div className=\"group flex items-center justify-between px-4 py-4 hover:bg-gray-50 sm:px-6 cursor-pointer\">\r\n        <span className=\"flex items-center truncate space-x-3\">\r\n          <span\r\n            className={\"w-2.5 h-2.5 flex-shrink-0 rounded-full\"}\r\n            aria-hidden=\"true\"\r\n          />\r\n          <span className=\"font-medium truncate text-sm leading-6\">\r\n            {task.task}\r\n          </span>\r\n        </span>\r\n        <ChevronRightIcon\r\n          className=\"ml-4 h-5 w-5 text-gray-400 group-hover:text-gray-500 flex-shrink-0\"\r\n          aria-hidden=\"true\"\r\n        />\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TinyTask;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../../hooks\";\r\nimport { RootState } from \"../../../store\";\r\nimport { selectTask, updateTaskTaskStatus } from \"../TaskList/TaskListSlice\";\r\nimport { TaskStatus } from \"./TaskInterface\";\r\nimport {\r\n  DuplicateIcon as DuplicateIconOutline,\r\n  CheckCircleIcon,\r\n  ExclamationCircleIcon,\r\n} from \"@heroicons/react/outline\";\r\n\r\nimport { DuplicateIcon as DuplicateIconSolid } from \"@heroicons/react/solid\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nfunction Task(props: { taskId: string; projectId?: string }) {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const task = useSelector(\r\n    (state: RootState) => state.tasks.taskList.byId[props.taskId]\r\n  );\r\n\r\n  const setSelectTask = (\r\n    e: React.MouseEvent<HTMLAnchorElement | HTMLDivElement, MouseEvent>\r\n  ) => {\r\n    if (e.target !== e.currentTarget) {\r\n      return;\r\n    }\r\n    dispatch(selectTask(props.taskId));\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(updateTaskTaskStatus({ newStatus: status, taskId: props.taskId }));\r\n  };\r\n\r\n  const taskText = () => (task.task ? task.task : \"Empty task text\");\r\n\r\n  const projectName = useSelector((state: RootState) =>\r\n    task.project ? state.projects.projectList.byId[task.project].project : null\r\n  );\r\n\r\n  const projectText = () => (task.project ? projectName : \"-\");\r\n\r\n  const taskCheckboxIcon = () => {\r\n    const classes = \"text-gray-400 mt-1 h-7 w-7 cursor-pointer\";\r\n    if (task.status === TaskStatus.Active) {\r\n      return (\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className={classes}\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n          onClick={() => updateTaskStatus(TaskStatus.Complete)}\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth=\"2\"\r\n            // d=\"M15 13l-3 3m0 0l-3-3m3 3V8m0 13a9 9 0 110-18 9 9 0 010 18z\"\r\n            d=\"M 21 12 a 9 9 0 1 1 -18 0 a 9 9 0 0 1 18 0 z\"\r\n          />\r\n        </svg>\r\n      );\r\n    } else if (task.status === TaskStatus.Complete) {\r\n      return (\r\n        <CheckCircleIcon\r\n          className={classes}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    } else if (task.status === TaskStatus.Dropped) {\r\n      return (\r\n        <ExclamationCircleIcon\r\n          className={classes}\r\n          onClick={() => updateTaskStatus(TaskStatus.Active)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n\r\n  const noteIcon = () => {\r\n    const classes =\r\n      \"w-8 h-8 bg-white inline-flex items-center justify-center text-gray-400 rounded-full \";\r\n\r\n    if (task.note) {\r\n      return (\r\n        <CopyToClipboard text={task.note}>\r\n          <DuplicateIconSolid\r\n            className={`${classes}hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 disabled`}\r\n          />\r\n        </CopyToClipboard>\r\n      );\r\n    } else {\r\n      return <DuplicateIconOutline className={`${classes}`} />;\r\n    }\r\n  };\r\n\r\n  const priorityIcon = () => {\r\n    return (\r\n      <div\r\n        className=\"inline rounded-xl border border-gray-500 px-2 py-0.5 text-gray-500\"\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        {task.priority}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const formatTaskDates = (date: number | null) => {\r\n    if (date && date > 0) {\r\n      return new Date(date).toLocaleDateString(\"en-us\");\r\n    } else {\r\n      return \"-\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <tr\r\n      key={props.taskId}\r\n      id={`taskId${props.taskId}`}\r\n      onClick={(e) => setSelectTask(e)}\r\n    >\r\n      <td className=\"px-6 py-0.5 text-sm text-gray-500 font-medium\">\r\n        {taskCheckboxIcon()}\r\n      </td>\r\n      {/* Task Name */}\r\n      <td\r\n        className=\"px-6 py-0.5 max-w-0 w-2/3 whitespace-nowrap text-sm font-medium text-gray-900 cursor-pointer\"\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        <div className=\"flex items-center\" onClick={(e) => setSelectTask(e)}>\r\n          <div\r\n            className={\"flex-shrink-0 w-2.5 h-2.5 rounded-full\"}\r\n            aria-hidden=\"true\"\r\n          />\r\n          <div\r\n            className=\"truncate hover:text-gray-600 cursor-pointer\"\r\n            onClick={(e) => setSelectTask(e)}\r\n          >\r\n            {taskText()}\r\n          </div>\r\n        </div>\r\n      </td>\r\n      {/* Task Project Parent */}\r\n      <td\r\n        className=\"px-6 py-0.5 max-w-0 w-1/3 whitespace-nowrap text-sm font-medium text-gray-900 cursor-pointer\"\r\n        onClick={(e) => setSelectTask(e)}\r\n      >\r\n        <div className=\"flex items-center\" onClick={(e) => setSelectTask(e)}>\r\n          <div\r\n            className={\"flex-shrink-0 w-2.5 h-2.5 rounded-full\"}\r\n            aria-hidden=\"true\"\r\n          />\r\n          <div\r\n            className=\"truncate hover:text-gray-600 cursor-pointer\"\r\n            onClick={(e) => setSelectTask(e)}\r\n          >\r\n            {projectText()}\r\n          </div>\r\n        </div>\r\n      </td>\r\n      {/* Priority */}\r\n      <td className=\"py-0.5 text-sm text-gray-500 font-medium text-center\">\r\n        {priorityIcon()}\r\n      </td>\r\n      {/* Defer Date */}\r\n      <td className=\"hidden md:table-cell px-6 py-0.5 whitespace-nowrap text-sm text-gray-500 text-right\">\r\n        {formatTaskDates(task.deferDate)}\r\n      </td>\r\n      {/* Due Date */}\r\n      <td className=\"hidden md:table-cell px-6 py-0.5 whitespace-nowrap text-sm text-gray-500 text-right\">\r\n        {formatTaskDates(task.dueDate)}\r\n      </td>\r\n      {/* Options */}\r\n      <td className=\"pr-6\">\r\n        <div className=\"relative flex justify-end items-center cursor-pointer\">\r\n          <span className=\"sr-only\">Copy Note</span>\r\n          {noteIcon()}\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import { useSelector } from \"react-redux\";\r\nimport { Fragment } from \"react\";\r\nimport { getTasks } from \"./TaskListSlice\";\r\nimport TinyTask from \"../Task/TinyTask\";\r\nimport Task from \"../Task/Task\";\r\nimport { getFilters } from \"../TaskListFilter/TaskFilterSlice\";\r\n\r\n/**\r\n * Creates the Task Rows for the main task UI.\r\n * @returns {FunctionComponent}\r\n */\r\nfunction TaskList(projectId: string | null) {\r\n  const taskList = useSelector(getTasks);\r\n  const taskListFilters = useSelector(getFilters);\r\n\r\n  const getTaskById = (taskId: string) => taskList.byId[taskId];\r\n\r\n  const hasNoteFilter = (taskId: string) => {\r\n    if (taskListFilters.hasNote) {\r\n      return getTaskById(taskId).note !== \"\";\r\n    } else if (taskListFilters.hasNote === false) {\r\n      return getTaskById(taskId).note === \"\";\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const priorityFilter = (taskId: string) => {\r\n    if (taskListFilters.priority) {\r\n      return taskListFilters.priority === getTaskById(taskId).priority;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const completionFilter = (taskId: string) => {\r\n    if (taskListFilters.completion) {\r\n      return taskListFilters.completion === getTaskById(taskId).status;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const archivedFilter = (taskId: string) => {\r\n    return getTaskById(taskId).archived === null;\r\n  };\r\n\r\n  const inSelectedProjectFilter = (taskId: string) => {\r\n    if (projectId) {\r\n      return getTaskById(taskId).project === projectId;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const buildTinyTaskList = () => {\r\n    if (taskList.allIds) {\r\n      return taskList.allIds\r\n        .filter(completionFilter)\r\n        .filter(priorityFilter)\r\n        .filter(hasNoteFilter)\r\n        .filter(archivedFilter)\r\n        .filter(inSelectedProjectFilter)\r\n        .map((taskId, index) => {\r\n          return <TinyTask taskId={taskId} key={index} />;\r\n        });\r\n    }\r\n  };\r\n\r\n  const buildTaskList = () => {\r\n    if (taskList.allIds) {\r\n      return taskList.allIds\r\n        .filter(completionFilter)\r\n        .filter(priorityFilter)\r\n        .filter(hasNoteFilter)\r\n        .filter(archivedFilter)\r\n        .filter(inSelectedProjectFilter)\r\n        .map((taskId, index) => {\r\n          return <Task taskId={taskId} key={index} />;\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Task list (only on smallest breakpoint) */}\r\n      <div className=\"mt-10 sm:hidden\">\r\n        <div className=\"px-4 sm:px-6\">\r\n          <h2 className=\"text-gray-500 text-xs font-medium uppercase tracking-wide\">\r\n            Tasks\r\n          </h2>\r\n        </div>\r\n        <ul className=\"mt-3 border-t border-gray-200 divide-y divide-gray-100\">\r\n          {buildTinyTaskList()}\r\n        </ul>\r\n      </div>\r\n      {/* Task table (small breakpoint and up) */}\r\n      <div className=\"hidden sm:block\">\r\n        <div className=\"align-middle inline-block min-w-full border-b border-gray-200\">\r\n          <table className=\"min-w-full\" id=\"taskList\">\r\n            <thead>\r\n              <tr className=\"border-t border-gray-200\">\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  <span className=\"lg:pl-2\">Task</span>\r\n                </th>\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  <span className=\"lg:pl-2\">Project</span>\r\n                </th>\r\n                <th className=\"px-12 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Priority\r\n                </th>\r\n                <th className=\"hidden md:table-cell px-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Defer Date\r\n                </th>\r\n                <th className=\"hidden md:table-cell px-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Due Date\r\n                </th>\r\n                <th className=\"pr-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\" />\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-100\">\r\n              {buildTaskList()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","import { ChangeEvent } from \"react\";\r\nimport { TaskPriority } from \"../Task/TaskInterface\";\r\nimport { updateTaskTaskPriority } from \"../TaskList/TaskListSlice\";\r\n\r\nconst priorityOptions = [\r\n  { value: TaskPriority.None, label: TaskPriority.None },\r\n  { value: TaskPriority.Low, label: TaskPriority.Low },\r\n  { value: TaskPriority.Medium, label: TaskPriority.Medium },\r\n  { value: TaskPriority.High, label: TaskPriority.High },\r\n  { value: TaskPriority.Immediate, label: TaskPriority.Immediate },\r\n];\r\n\r\nfunction PrioritySelect(\r\n  dispatch: any,\r\n  selectedTaskId: string,\r\n  currentPriority: TaskPriority\r\n) {\r\n  const updateTaskPriority = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    dispatch(\r\n      updateTaskTaskPriority({\r\n        newPriority: e.target.value,\r\n        taskId: selectedTaskId,\r\n      })\r\n    );\r\n  };\r\n\r\n  const buildOptionsList = () => {\r\n    return priorityOptions.map((value) => {\r\n      return (\r\n        <option\r\n          className=\"w-full rounded\"\r\n          value={value.value}\r\n          key={value.value}\r\n        >\r\n          {value.label}\r\n        </option>\r\n      );\r\n    });\r\n  };\r\n\r\n  // TODO: Change this to use divs and a's instead of being a select\r\n  return (\r\n    <select\r\n      className=\"mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md\"\r\n      onChange={(e) => updateTaskPriority(e)}\r\n      id=\"selectedTaskPrioritySelect\"\r\n      value={currentPriority}\r\n    >\r\n      {buildOptionsList()}\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default PrioritySelect;\r\n","function ButtonGroup(\r\n  buttonGroupSelectedOption: any,\r\n  onClickArg: Function,\r\n  options: any[],\r\n  idPrefix: string\r\n) {\r\n  const buttonIsActive = (option: any) => {\r\n    if (buttonGroupSelectedOption === option) {\r\n      return \"font-semibold bg-indigo-700 text-white hover:text-indigo-700 hover:bg-indigo-300\";\r\n    } else {\r\n      return \"font-medium bg-gray-100 text-gray-700 hover:text-gray-700 hover:bg-gray-300\";\r\n    }\r\n  };\r\n\r\n  const convertOptionText = (option: any) => {\r\n    if (option === null) {\r\n      return \"Select All\";\r\n    } else if (option === true) {\r\n      return \"True\";\r\n    } else if (option === false) {\r\n      return \"False\";\r\n    } else {\r\n      return option;\r\n    }\r\n  };\r\n\r\n  const leftButton = () => {\r\n    const buttonText = options[0];\r\n\r\n    return (\r\n      <button\r\n        className={`${buttonIsActive(\r\n          buttonText\r\n        )} -ml-px w-full items-center px-4 py-2 rounded-l-md border border-gray-300 text-sm focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`}\r\n        id={`${idPrefix}${buttonText}Button`}\r\n        onClick={() => onClickArg(buttonText)}\r\n        key={buttonText}\r\n      >\r\n        {convertOptionText(buttonText)}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const middleButtons = () => {\r\n    return options.slice(1, options.length - 1).map((buttonText, index) => {\r\n      return (\r\n        <button\r\n          className={`${buttonIsActive(\r\n            buttonText\r\n          )} -ml-px w-full items-center px-4 py-2 border border-gray-300 bg-white text-sm focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`}\r\n          id={`${idPrefix}${buttonText}Button`}\r\n          onClick={() => onClickArg(buttonText)}\r\n          key={buttonText}\r\n        >\r\n          {convertOptionText(buttonText)}\r\n        </button>\r\n      );\r\n    });\r\n  };\r\n\r\n  const rightButton = () => {\r\n    const buttonText = options[options.length - 1];\r\n    return (\r\n      <button\r\n        className={`${buttonIsActive(\r\n          buttonText\r\n        )} -ml-px w-full items-center px-4 py-2 rounded-r-md border border-gray-300 text-sm focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`}\r\n        id={`${idPrefix}${buttonText}Button`}\r\n        onClick={() => onClickArg(buttonText)}\r\n        key={buttonText}\r\n      >\r\n        {convertOptionText(buttonText)}\r\n      </button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative z-0 flex flex-row shadow-sm rounded-md\">\r\n      {leftButton()}\r\n      {middleButtons()}\r\n      {rightButton()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonGroup;\r\n","import { Listbox, Transition } from \"@headlessui/react\";\r\nimport { CheckIcon, SelectorIcon } from \"@heroicons/react/solid\";\r\nimport { Fragment } from \"react\";\r\nimport NormalizedObjects from \"../../NormalizedObjects/NormalizedObjects\";\r\nimport Project from \"../../ProjectUI/Project/ProjectInterface\";\r\n\r\nfunction classNames(...classes: any[]) {\r\n  return classes.filter(Boolean).join(\" \");\r\n}\r\n\r\nfunction ProjectSelect(\r\n  projectList: NormalizedObjects<Project>,\r\n  selectedProjectId: string | null,\r\n  setProject: (value: string) => void\r\n) {\r\n  const ProjectSelectOption = (projectId: string | null) => {\r\n    const project = projectId\r\n      ? projectList.byId[projectId]\r\n      : { project: \"N/A\" };\r\n\r\n    return (\r\n      <Listbox.Option\r\n        key={projectId}\r\n        className={({ active }) =>\r\n          classNames(\r\n            active ? \"text-white bg-indigo-600\" : \"text-gray-900\",\r\n            \"cursor-default select-none relative py-2 pl-3 pr-9\"\r\n          )\r\n        }\r\n        value={projectId}\r\n      >\r\n        {({ selected, active }) => (\r\n          <>\r\n            <span\r\n              className={classNames(\r\n                selected ? \"font-semibold\" : \"font-normal\",\r\n                \"block truncate\"\r\n              )}\r\n            >\r\n              {project.project}\r\n            </span>\r\n\r\n            {selected ? (\r\n              <span\r\n                className={classNames(\r\n                  active ? \"text-white\" : \"text-indigo-600\",\r\n                  \"absolute inset-y-0 right-0 flex items-center pr-4\"\r\n                )}\r\n              >\r\n                <CheckIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\r\n              </span>\r\n            ) : null}\r\n          </>\r\n        )}\r\n      </Listbox.Option>\r\n    );\r\n  };\r\n\r\n  const projectSelectedText = (projectId: string | null) => {\r\n    return projectId ? projectList.byId[projectId].project : \"N/A\";\r\n  };\r\n\r\n  const projectOptionsList = () => {\r\n    return [...projectList.allIds, null];\r\n  };\r\n\r\n  return (\r\n    <Listbox value={selectedProjectId} onChange={setProject}>\r\n      {({ open }) => (\r\n        <>\r\n          <Listbox.Label className=\"block text-sm font-medium text-gray-700\">\r\n            Project\r\n          </Listbox.Label>\r\n          <div className=\"mt-1 relative\">\r\n            <Listbox.Button className=\"bg-white relative w-full border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\">\r\n              <span className=\"block truncate\">\r\n                {projectSelectedText(selectedProjectId)}\r\n              </span>\r\n              <span className=\"absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none\">\r\n                <SelectorIcon\r\n                  className=\"h-5 w-5 text-gray-400\"\r\n                  aria-hidden=\"true\"\r\n                />\r\n              </span>\r\n            </Listbox.Button>\r\n\r\n            <Transition\r\n              show={open}\r\n              as={Fragment}\r\n              leave=\"transition ease-in duration-100\"\r\n              leaveFrom=\"opacity-100\"\r\n              leaveTo=\"opacity-0\"\r\n            >\r\n              <Listbox.Options\r\n                static\r\n                className=\"absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm\"\r\n              >\r\n                {projectOptionsList().map((projectId) => {\r\n                  return ProjectSelectOption(projectId);\r\n                })}\r\n              </Listbox.Options>\r\n            </Transition>\r\n          </div>\r\n        </>\r\n      )}\r\n    </Listbox>\r\n  );\r\n}\r\n\r\nexport default ProjectSelect;\r\n","import { ChangeEvent, useState, Fragment, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useAppDispatch } from \"../../../hooks\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Task, { TaskStatus } from \"../Task/TaskInterface\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport { Transition, Dialog } from \"@headlessui/react\";\r\nimport { XIcon } from \"@heroicons/react/outline\";\r\n\r\nimport {\r\n  getSelectedTask,\r\n  getSelectedTaskId,\r\n  updateTaskTaskName,\r\n  updateTaskTaskStatus,\r\n  updateTaskTaskNote,\r\n  updateTaskTaskDeferDate,\r\n  updateTaskTaskDueDate,\r\n  selectTask,\r\n  archiveTask,\r\n  updateTaskTaskProject,\r\n} from \"../TaskList/TaskListSlice\";\r\n\r\nimport PrioritySelect from \"./PrioritySelect\";\r\nimport ButtonGroup from \"../../ButtonGroup/ButtonGroup\";\r\nimport { TrashIcon } from \"@heroicons/react/solid\";\r\nimport ProjectSelect from \"./ProjectSelect\";\r\nimport { getProjects } from \"../../ProjectUI/ProjectList/ProjectListSlice\";\r\n/**\r\n * After clicking on a task in\r\n * @returns {FunctionComponent}\r\n */\r\nfunction SelectedTask() {\r\n  const selectedTaskId = useSelector(getSelectedTaskId);\r\n  const selectedTask: Task | null = useSelector(getSelectedTask);\r\n  const projectList = useSelector(getProjects);\r\n\r\n  const dispatch = useAppDispatch();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (selectedTaskId !== null) {\r\n      setOpen(true);\r\n    } else {\r\n      setOpen(false);\r\n    }\r\n  }, [selectedTaskId]);\r\n\r\n  const clearSelectedTask = () => {\r\n    dispatch(selectTask(null));\r\n  };\r\n\r\n  const deleteSelectedTask = (id: string) => {\r\n    dispatch(archiveTask({ taskId: id }));\r\n  };\r\n\r\n  const updateTaskName = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(\r\n      updateTaskTaskName({ newName: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskStatus = (status: TaskStatus) => {\r\n    dispatch(\r\n      updateTaskTaskStatus({ newStatus: status, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskNote = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    dispatch(\r\n      updateTaskTaskNote({ newNote: e.target.value, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskDeferDate = (e: Date) => {\r\n    const newDate = e ? e.getTime() : null;\r\n    dispatch(\r\n      updateTaskTaskDeferDate({ newDate: newDate, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskDueDate = (e: Date) => {\r\n    const newDate = e ? e.getTime() : null;\r\n    dispatch(\r\n      updateTaskTaskDueDate({ newDate: newDate, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  const updateTaskProject = (projectID: string) => {\r\n    dispatch(\r\n      updateTaskTaskProject({ newProject: projectID, taskId: selectedTaskId })\r\n    );\r\n  };\r\n\r\n  // Early returns here to avoid having the selected task stay open at all times\r\n  if (\r\n    selectedTask === undefined ||\r\n    selectedTask === null ||\r\n    selectedTaskId === null\r\n  ) {\r\n    return;\r\n  }\r\n\r\n  const styleDates = (date: number | null) => {\r\n    if (date !== null && date > 0) {\r\n      return new Date(date).toLocaleString(\"en-us\");\r\n    } else {\r\n      return \"N/A\";\r\n    }\r\n  };\r\n\r\n  const taskSubsectionHeader = (subsectionHeader: string, id: string) => {\r\n    return (\r\n      <label\r\n        htmlFor={id}\r\n        className=\"block text-lg font-medium text-gray-900 sm:mt-px sm:pt-2\"\r\n      >\r\n        {subsectionHeader}\r\n      </label>\r\n    );\r\n  };\r\n\r\n  const datepicker = (\r\n    date: number | null,\r\n    dateChangeFunction: Function,\r\n    placeholderText: string\r\n  ) => {\r\n    const chosenDate = date ? new Date(date) : null;\r\n    return (\r\n      <DatePicker\r\n        selected={chosenDate}\r\n        onChange={(date) => dateChangeFunction(date)}\r\n        isClearable\r\n        placeholderText={placeholderText}\r\n        dateFormat=\"MM/dd/yyyy\"\r\n        className=\"block w-full shadow-sm sm:text-sm focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 rounded-md\"\r\n        todayButton=\"Today\"\r\n        openToDate={new Date(Date.now())}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Transition.Root show={open} as={Fragment} afterLeave={clearSelectedTask}>\r\n      <Dialog\r\n        as=\"div\"\r\n        static\r\n        className=\"fixed inset-0 overflow-hidden\"\r\n        open={open}\r\n        onClose={setOpen}\r\n      >\r\n        <div className=\"absolute inset-0 overflow-hidden\">\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"ease-in-out duration-500\"\r\n            enterFrom=\"opacity-0\"\r\n            enterTo=\"opacity-100\"\r\n            leave=\"ease-in-out duration-500\"\r\n            leaveFrom=\"opacity-100\"\r\n            leaveTo=\"opacity-0\"\r\n          >\r\n            <Dialog.Overlay className=\"absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\r\n          </Transition.Child>\r\n\r\n          <div className=\"fixed inset-y-0 right-0 pl-10 max-w-full flex\">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"transform transition ease-in-out duration-500 sm:duration-700\"\r\n              enterFrom=\"translate-x-full\"\r\n              enterTo=\"translate-x-0\"\r\n              leave=\"transform transition ease-in-out duration-500 sm:duration-700\"\r\n              leaveFrom=\"translate-x-0\"\r\n              leaveTo=\"translate-x-full\"\r\n            >\r\n              <div className=\"w-screen max-w-md\">\r\n                <div className=\"h-full flex flex-col py-6 bg-white shadow-xl overflow-y-scroll\">\r\n                  <div className=\"px-4 sm:px-6\">\r\n                    <div className=\"flex items-start justify-between border-b pb-2\">\r\n                      {/* Task Text */}\r\n                      <Dialog.Title className=\"flex-grow text-lg font-medium text-gray-900\">\r\n                        <label\r\n                          htmlFor=\"task\"\r\n                          className=\"block text-lg font-medium text-gray-700\"\r\n                        >\r\n                          Task\r\n                        </label>\r\n                        <div className=\"mt-1\">\r\n                          <textarea\r\n                            id=\"selectedTaskName\"\r\n                            name=\"selectedTaskName\"\r\n                            rows={4}\r\n                            value={selectedTask.task}\r\n                            onChange={(e) => updateTaskName(e)}\r\n                            className=\"max-w-lg shadow-sm block w-full focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md\"\r\n                            placeholder=\"Empty task text\"\r\n                          />\r\n                        </div>\r\n                      </Dialog.Title>\r\n                      {/* Close Icon */}\r\n                      <div className=\"ml-3 h-7 flex items-center\">\r\n                        <button\r\n                          className=\"bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                          id=\"closeSelectedTask\"\r\n                          onClick={() => setOpen(false)}\r\n                        >\r\n                          <span className=\"sr-only\">Close panel</span>\r\n                          <XIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"relative flex-1 px-4 sm:px-6\">\r\n                    <div className=\"absolute inset-0 px-4 sm:px-6 divide-y space-y-2\">\r\n                      {/* Button Group */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Task Status\", \"taskStatus\")}\r\n                        {ButtonGroup(\r\n                          selectedTask.status,\r\n                          updateTaskStatus,\r\n                          [\r\n                            TaskStatus.Active,\r\n                            TaskStatus.Complete,\r\n                            TaskStatus.Dropped,\r\n                          ],\r\n                          \"selectedTask\"\r\n                        )}\r\n                      </div>\r\n                      {/* Project Select */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Project\", \"Project\")}\r\n                        {ProjectSelect(\r\n                          projectList,\r\n                          selectedTask.project,\r\n                          updateTaskProject\r\n                        )}\r\n                      </div>\r\n                      {/* Tags */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Tags\", \"tags\")}\r\n                        <div className=\"text-gray-500\">Not Implemented</div>\r\n                      </div>\r\n                      {/* Priority */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Priority\", \"priority\")}\r\n                        {PrioritySelect(\r\n                          dispatch,\r\n                          selectedTaskId,\r\n                          selectedTask.priority\r\n                        )}\r\n                      </div>\r\n                      {/* Defer/Due Dates */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Defer/Due Dates\", \"duedates\")}\r\n                        <div className=\"w-full\">\r\n                          {datepicker(\r\n                            selectedTask.deferDate,\r\n                            updateTaskDeferDate,\r\n                            \"Defer Date\"\r\n                          )}\r\n                        </div>\r\n                        <div className=\"w-full\">\r\n                          {datepicker(\r\n                            selectedTask.dueDate,\r\n                            updateTaskDueDate,\r\n                            \"Due Date\"\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      {/* Note */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Task Note\", \"taskNote\")}\r\n                        <TextareaAutosize\r\n                          className=\"max-w-lg shadow-sm block w-full focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-gray-300 rounded-md\"\r\n                          placeholder=\"Empty Note\"\r\n                          id=\"selectedTaskNote\"\r\n                          value={selectedTask.note}\r\n                          onChange={(e) => updateTaskNote(e)}\r\n                        />\r\n                      </div>\r\n                      {/* Dates */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Task Dates\", \"taskDates\")}\r\n                        <div>\r\n                          <div className=\"inline font-medium\">Created: </div>\r\n                          <div\r\n                            id=\"selectedTaskCreated\"\r\n                            className=\"inline text-sm text-gray-900\"\r\n                          >\r\n                            {styleDates(selectedTask.created)}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"inline font-medium\">Modified: </div>\r\n                          <div\r\n                            id=\"selectedTaskModified\"\r\n                            className=\"inline text-sm text-gray-900\"\r\n                          >\r\n                            {styleDates(selectedTask.modified)}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"inline font-medium\">Completed: </div>\r\n                          <div\r\n                            id=\"selectedTaskCompleted\"\r\n                            className=\"inline text-sm text-gray-900\"\r\n                          >\r\n                            {styleDates(selectedTask.completed)}\r\n                          </div>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"inline font-medium\">Archived: </div>\r\n                          <div\r\n                            id=\"selectedTaskCompleted\"\r\n                            className=\"inline text-sm text-gray-900\"\r\n                          >\r\n                            {styleDates(selectedTask.archived)}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      {/* Additional Actions */}\r\n                      <div className=\"w-full\">\r\n                        {taskSubsectionHeader(\"Actions\", \"actions\")}\r\n                        <button\r\n                          type=\"button\"\r\n                          className=\"inline-flex w-full items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\r\n                          onClick={() => deleteSelectedTask(selectedTaskId)}\r\n                        >\r\n                          <TrashIcon\r\n                            className=\"-ml-1 mr-3 h-5 w-5\"\r\n                            aria-hidden=\"true\"\r\n                          />\r\n                          Archive Task\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Transition.Child>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  );\r\n}\r\n\r\nexport default SelectedTask;\r\n","import React, { ChangeEvent, Fragment, useState } from \"react\";\r\nimport { Disclosure, Transition } from \"@headlessui/react\";\r\n\r\nimport { addTask } from \"../../TaskList/TaskListSlice\";\r\nimport { CheckCircleIcon } from \"@heroicons/react/outline\";\r\nimport { useAppDispatch } from \"../../../../hooks\";\r\n\r\n/**\r\n * Returns the AddNewTask Button, and the input it controls\r\n * @return {FunctionComponent}\r\n */\r\nfunction AddNewTask(projectId: string | null) {\r\n  const [taskText, setTaskText] = useState(\"\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const createNewTask = () => {\r\n    dispatch(addTask({ task: taskText.trim(), project: projectId }));\r\n    setTaskText(\"\");\r\n  };\r\n\r\n  const onEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\" && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      createNewTask();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Disclosure>\r\n      {({ open }) => (\r\n        <>\r\n          <Disclosure.Button\r\n            type=\"button\"\r\n            className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-1 ml-3\"\r\n          >\r\n            Add New Task\r\n          </Disclosure.Button>\r\n          <Transition\r\n            show={open}\r\n            as={Fragment}\r\n            enter=\"transition ease-out duration-75\"\r\n            enterFrom=\"transform opacity-0 scale-95\"\r\n            enterTo=\"transform opacity-100 scale-100\"\r\n            leave=\"transition ease-in duration-75\"\r\n            leaveFrom=\"transform opacity-100 scale-100\"\r\n            leaveTo=\"transform opacity-0 scale-95\"\r\n          >\r\n            <Disclosure.Panel static>\r\n              <div className=\"flex flex-row relative order-2\">\r\n                <input\r\n                  className=\"ml-4 px-4 border border-purple-500 rounded-md font-medium text-sm shadow-sm focus:ring-purple-500 focus:outline-none\"\r\n                  type=\"text\"\r\n                  id=\"addTaskInput\"\r\n                  placeholder=\"Enter new task\"\r\n                  value={taskText}\r\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                    setTaskText(e.target.value)\r\n                  }\r\n                  onKeyDown={(e) => {\r\n                    onEnterPress(e);\r\n                    open = false;\r\n                  }}\r\n                />\r\n                <button\r\n                  className=\"absolute inset-y-0 right-0 pl-3 pr-3 flex items-center bg-purple-500 rounded rounded-l-none\"\r\n                  id=\"submitNewTaskButton\"\r\n                  onClick={() => {\r\n                    createNewTask();\r\n                    open = false;\r\n                  }}\r\n                >\r\n                  <CheckCircleIcon className=\"h-5 w-5 text-white\" />\r\n                </button>\r\n              </div>\r\n            </Disclosure.Panel>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Disclosure>\r\n  );\r\n}\r\n\r\nexport default AddNewTask;\r\n","import AddNewTask from \"./AddNewTask/AddNewTask\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../store\";\r\n\r\nfunction TaskHeader(projectId: string | null) {\r\n  const projectName = useSelector((state: RootState) =>\r\n    projectId ? state.projects.projectList.byId[projectId].project : \"Home\"\r\n  );\r\n\r\n  return (\r\n    <div className=\"border-b border-gray-200 px-4 py-4 sm:flex sm:items-center sm:justify-between sm:px-6 lg:px-8\">\r\n      <div className=\"flex-1 min-w-0\">\r\n        <h1 className=\"text-lg font-medium leading-6 text-gray-900 sm:truncate\">\r\n          {projectName}\r\n        </h1>\r\n      </div>\r\n      <div className=\"mt-4 flex sm:mt-0 sm:ml-4\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"ml-3 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-0 sm:ml-0\"\r\n        >\r\n          Share\r\n        </button>\r\n        {AddNewTask(projectId)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskHeader;\r\n","import PinnedProjects from \"../PinnedProjects/PinnedProjects\";\r\nimport TaskListFilters from \"./TaskListFilter/TaskListFilters\";\r\nimport SearchHeader from \"./SearchHeader/SearchHeader\";\r\nimport TaskList from \"./TaskList/TaskList\";\r\nimport SelectedTask from \"./SelectedTask/SelectedTask\";\r\nimport MobileSidebar from \"../Sidebars/MobileSidebar\";\r\nimport Sidebar from \"../Sidebars/Sidebar\";\r\nimport TaskHeader from \"./TasksHeader/TasksHeader\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nfunction TaskUI(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  const currentURL = useLocation().pathname;\r\n\r\n  // If a project has been passed in, this should display the Projects task view, not the Inbox\r\n  const projectId = currentURL ? currentURL.split(\"/\")[2] : null;\r\n\r\n  return (\r\n    <div className=\"h-screen flex overflow-hidden bg-white\">\r\n      {/* Slideout sidebar for mobile */}\r\n      {MobileSidebar(sidebarOpen, setSidebarOpen)}\r\n      {/* Static sidebar for desktop */}\r\n      {Sidebar(sidebarOpen, setSidebarOpen)}\r\n      {/* Main column */}\r\n      <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n        {/* Search header */}\r\n        {SearchHeader(sidebarOpen, setSidebarOpen)}\r\n        <main className=\"flex-1 relative z-0 overflow-y-auto focus:outline-none\">\r\n          {/* Page title & actions */}\r\n          {TaskHeader(projectId)}\r\n          {/* Pinned projects */}\r\n          {PinnedProjects(projectId)}\r\n          {/* Task Filters */}\r\n          {TaskListFilters()}\r\n          {/* Project List */}\r\n          {TaskList(projectId)}\r\n        </main>\r\n      </div>\r\n      {SelectedTask()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskUI;\r\n","import React, { ChangeEvent, Fragment, useState } from \"react\";\r\nimport { Disclosure, Transition } from \"@headlessui/react\";\r\n\r\nimport { addProject } from \"../../ProjectList/ProjectListSlice\";\r\nimport { CheckCircleIcon } from \"@heroicons/react/outline\";\r\nimport { useAppDispatch } from \"../../../../hooks\";\r\n\r\nfunction AddNewProject() {\r\n  const [projectText, setProjectText] = useState(\"\");\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const createNewProject = () => {\r\n    dispatch(addProject(projectText.trim()));\r\n    setProjectText(\"\");\r\n  };\r\n\r\n  const onEnterPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Enter\" && e.shiftKey === false) {\r\n      e.preventDefault();\r\n      createNewProject();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Disclosure>\r\n      {({ open }) => (\r\n        <>\r\n          <Disclosure.Button\r\n            type=\"button\"\r\n            className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-purple-600 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-1 ml-3\"\r\n          >\r\n            Add New Project\r\n          </Disclosure.Button>\r\n          <Transition\r\n            show={open}\r\n            as={Fragment}\r\n            enter=\"transition ease-out duration-75\"\r\n            enterFrom=\"transform opacity-0 scale-95\"\r\n            enterTo=\"transform opacity-100 scale-100\"\r\n            leave=\"transition ease-in duration-75\"\r\n            leaveFrom=\"transform opacity-100 scale-100\"\r\n            leaveTo=\"transform opacity-0 scale-95\"\r\n          >\r\n            <Disclosure.Panel static>\r\n              <div className=\"flex flex-row relative order-2\">\r\n                <input\r\n                  className=\"ml-4 px-4 border border-purple-500 rounded-md font-medium text-sm shadow-sm focus:ring-purple-500 focus:outline-none\"\r\n                  type=\"text\"\r\n                  id=\"addTaskInput\"\r\n                  placeholder=\"Enter new project\"\r\n                  value={projectText}\r\n                  onChange={(e: ChangeEvent<HTMLInputElement>) =>\r\n                    setProjectText(e.target.value)\r\n                  }\r\n                  onKeyDown={(e) => {\r\n                    onEnterPress(e);\r\n                    open = false;\r\n                  }}\r\n                />\r\n                <button\r\n                  className=\"absolute inset-y-0 right-0 pl-3 pr-3 flex items-center bg-purple-500 rounded rounded-l-none\"\r\n                  id=\"submitNewProjectButton\"\r\n                  onClick={() => {\r\n                    createNewProject();\r\n                    open = false;\r\n                  }}\r\n                >\r\n                  <CheckCircleIcon className=\"h-5 w-5 text-white\" />\r\n                </button>\r\n              </div>\r\n            </Disclosure.Panel>\r\n          </Transition>\r\n        </>\r\n      )}\r\n    </Disclosure>\r\n  );\r\n}\r\n\r\nexport default AddNewProject;\r\n","import AddNewProject from \"./AddNewProject/AddNewProject\";\r\n\r\nfunction ProjectHeader() {\r\n  return (\r\n    <div className=\"border-b border-gray-200 px-4 py-4 sm:flex sm:items-center sm:justify-between sm:px-6 lg:px-8\">\r\n      <div className=\"flex-1 min-w-0\">\r\n        <h1 className=\"text-lg font-medium leading-6 text-gray-900 sm:truncate\">\r\n          Projects Home\r\n        </h1>\r\n      </div>\r\n      <div className=\"mt-4 flex sm:mt-0 sm:ml-4\">\r\n        <button\r\n          type=\"button\"\r\n          className=\"ml-3 inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:order-0 sm:ml-0\"\r\n        >\r\n          Share\r\n        </button>\r\n        {AddNewProject()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectHeader;\r\n","import { ChevronRightIcon } from \"@heroicons/react/solid\";\r\n\r\nfunction TinyProject(props: { projectId: string }) {\r\n  return (\r\n    <li key={props.projectId}>\r\n      <div className=\"group flex items-center justify-between px-4 py-4 hover:bg-gray-50 sm:px-6 cursor-pointer\">\r\n        <span className=\"flex items-center truncate space-x-3\">\r\n          <span\r\n            className={\"w-2.5 h-2.5 flex-shrink-0 rounded-full\"}\r\n            aria-hidden=\"true\"\r\n          />\r\n          <span className=\"font-medium truncate text-sm leading-6\">\r\n            project name\r\n          </span>\r\n        </span>\r\n        <ChevronRightIcon\r\n          className=\"ml-4 h-5 w-5 text-gray-400 group-hover:text-gray-500 flex-shrink-0\"\r\n          aria-hidden=\"true\"\r\n        />\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TinyProject;\r\n","import { Fragment } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTasks } from \"../../TaskUI/TaskList/TaskListSlice\";\r\nimport TinyProject from \"../Project/TinyProject\";\r\nimport { getProjects } from \"./ProjectListSlice\";\r\nimport Task from \"../../TaskUI/Task/Task\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ProjectList() {\r\n  const projectList = useSelector(getProjects);\r\n  const taskList = useSelector(getTasks);\r\n\r\n  const getTaskById = (taskId: string) => taskList.byId[taskId];\r\n\r\n  const taskInProjectFilter = (projectId: string, taskId: string) => {\r\n    return getTaskById(taskId).project === projectId;\r\n  };\r\n\r\n  const buildTinyProjectList = (project: string) => {\r\n    if (projectList.allIds) {\r\n      return projectList.allIds.map((projectId, index) => {\r\n        return <TinyProject projectId={projectId} key={index} />;\r\n      });\r\n    }\r\n  };\r\n\r\n  const buildProjectTaskList = (project: string) => {\r\n    const projectFilteredTaskIds = taskList.allIds.filter((task) =>\r\n      taskInProjectFilter(project, task)\r\n    );\r\n\r\n    if (projectFilteredTaskIds.length > 0) {\r\n      return projectFilteredTaskIds.map((taskId, index) => {\r\n        return <Task projectId={project} taskId={taskId} key={index} />;\r\n      });\r\n    } else {\r\n      return (\r\n        <tr>\r\n          <td colSpan={7} className=\"text-gray-500 text-center\">\r\n            No tasks in project\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n  };\r\n\r\n  const tinyProjectSubTable = () => {\r\n    return projectList.allIds.map((project) => {\r\n      return (\r\n        <ul\r\n          key={project}\r\n          className=\"mt-3 border-t border-gray-200 divide-y divide-gray-100\"\r\n        >\r\n          {buildTinyProjectList(project)}\r\n        </ul>\r\n      );\r\n    });\r\n  };\r\n\r\n  const projectSubTable = () => {\r\n    return projectList.allIds.map((project) => {\r\n      return (\r\n        <div key={project}>\r\n          <Link to={`/projects/${project}`}>\r\n            <div className=\"bg-white px-4 py-5 border-t-2 mt-1 border-gray-200 sm:px-6\">\r\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\r\n                {projectList.byId[project].project}\r\n              </h3>\r\n            </div>\r\n          </Link>\r\n          <table className=\"min-w-full\" id=\"taskList\">\r\n            <thead>\r\n              <tr className=\"border-t border-gray-200\">\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Status\r\n                </th>\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  <span className=\"lg:pl-2\">Task</span>\r\n                </th>\r\n                <th className=\"px-6 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  <span className=\"lg:pl-2\">Project</span>\r\n                </th>\r\n                <th className=\"px-12 py-3 border-b border-gray-200 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Priority\r\n                </th>\r\n                <th className=\"hidden md:table-cell px-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Defer Date\r\n                </th>\r\n                <th className=\"hidden md:table-cell px-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                  Due Date\r\n                </th>\r\n                <th className=\"pr-6 py-3 border-b border-gray-200 bg-gray-50 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\" />\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-100\">\r\n              {buildProjectTaskList(project)}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Projects list (only on smallest breakpoint) */}\r\n      <div className=\"mt-10 sm:hidden\">\r\n        <div className=\"px-4 sm:px-6\">\r\n          <h2 className=\"text-gray-500 text-xs font-medium uppercase tracking-wide\">\r\n            Projects\r\n          </h2>\r\n          {tinyProjectSubTable()}\r\n        </div>\r\n      </div>\r\n      {/* Projects table (small breakpoint and up) */}\r\n      <div className=\"hidden sm:block\">\r\n        <div className=\"align-middle inline-block min-w-full border-b border-gray-200\">\r\n          {projectSubTable()}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ProjectList;\r\n","import MobileSidebar from \"../Sidebars/MobileSidebar\";\r\nimport PinnedProjects from \"../PinnedProjects/PinnedProjects\";\r\nimport Sidebar from \"../Sidebars/Sidebar\";\r\nimport SearchHeader from \"../TaskUI/SearchHeader/SearchHeader\";\r\nimport ProjectHeader from \"./ProjectHeader/ProjectHeader\";\r\nimport ProjectList from \"./ProjectList/ProjectList\";\r\n\r\nfunction ProjectUI(sidebarOpen: boolean, setSidebarOpen: Function) {\r\n  return (\r\n    <div className=\"h-screen flex overflow-hidden bg-white\">\r\n      {/* Slideout sidebar for mobile */}\r\n      {MobileSidebar(sidebarOpen, setSidebarOpen)}\r\n      {/* Static sidebar for desktop */}\r\n      {Sidebar(sidebarOpen, setSidebarOpen)}\r\n      {/* Main column */}\r\n      <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n        {SearchHeader(sidebarOpen, setSidebarOpen)}\r\n        <main className=\"flex-1 relative z-0 overflow-y-auto focus:outline-none\">\r\n          {/* Page title & actions */}\r\n          {ProjectHeader()}\r\n          {/* Pinned projects */}\r\n          {PinnedProjects(null)}\r\n          {/* Project List */}\r\n          {ProjectList()}\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectUI;\r\n","import { useState } from \"react\";\r\n\r\nimport Sidebar from \"./Components/Sidebars/Sidebar\";\r\nimport MobileSidebar from \"./Components/Sidebars/MobileSidebar\";\r\nimport { Switch, Route } from \"react-router\";\r\nimport TaskUI from \"./Components/TaskUI/TaskUI\";\r\nimport ProjectUI from \"./Components/ProjectUI/ProjectUI\";\r\n\r\nexport default function Example() {\r\n  const [sidebarOpen, setSidebarOpen] = useState(false);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/inbox\">\r\n        {TaskUI(sidebarOpen, setSidebarOpen)}\r\n      </Route>\r\n      <Route exact path=\"/projects\">\r\n        {ProjectUI(sidebarOpen, setSidebarOpen)}\r\n      </Route>\r\n      <Route path=\"/projects/:id\">{TaskUI(sidebarOpen, setSidebarOpen)}</Route>\r\n      <Route>\r\n        <div className=\"h-screen flex overflow-hidden bg-white\">\r\n          {/* Slideout sidebar for mobile */}\r\n          {MobileSidebar(sidebarOpen, setSidebarOpen)}\r\n          {/* Static sidebar for desktop */}\r\n          {Sidebar(sidebarOpen, setSidebarOpen)}\r\n          {/* Main column */}\r\n          <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n            <main className=\"flex-1 relative z-0 overflow-y-auto focus:outline-none\">\r\n              oops\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { Provider } from \"react-redux\";\r\nimport store, { persistor } from \"./store\";\r\n\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <React.StrictMode>\r\n        <Router basename=\"open-gtd\">\r\n          <App />\r\n        </Router>\r\n      </React.StrictMode>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}